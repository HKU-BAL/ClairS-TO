#!/usr/bin/env python

# BSD 3-Clause License
#
# Copyright 2023 The University of Hong Kong, Department of Computer Science
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
import sys
import argparse
import shlex
import subprocess

from collections import defaultdict, namedtuple
from argparse import SUPPRESS

try:
    from packaging.version import parse as version_parse
except ModuleNotFoundError:
    from distutils.version import LooseVersion as version_parse

from time import time

import shared.param as param
from shared.interval_tree import bed_tree_from
from shared.utils import file_path_from, folder_path_from, subprocess_popen, str2bool, str_none, \
    legal_range_from, log_error, log_warning

major_contigs = {"chr" + str(a) for a in list(range(1, 23)) + ["X", "Y"]}.union(
    {str(a) for a in list(range(1, 23)) + ["X", "Y"]})
major_contigs_order = ["chr" + str(a) for a in list(range(1, 23)) + ["X", "Y"]] + [str(a) for a in
                                                                                   list(range(1, 23)) + ["X", "Y"]]

file_directory = os.path.dirname(os.path.realpath(__file__))
main_entry = os.path.join(file_directory, "clairs_to.py")
MAX_STEP = 20

OutputPath = namedtuple('OutputPath', [
    'log_path',
    'tmp_file_path',
    'split_bed_path',
    'split_indel_bed_path',
    'candidates_path',
    'pileup_tensor_can_affirmative_path',
    'pileup_tensor_can_negational_path',
    'vcf_output_path',
])


class Tee(object):
    def __init__(self, name, mode):
        self.file = open(name, mode)
        self.stdout = sys.stdout
        sys.stdout = self

    def __del__(self):
        sys.stdout = self.stdout
        self.file.close()

    def write(self, data):
        self.file.write(data)
        self.stdout.write(data)

    def flush(self):
        self.file.flush()


def logging(str):
    if args.tee is None:
        print(str)
    else:
        args.tee.stdin.write(bytes(str + '\n', encoding='utf8'))


def create_output_folder(args):
    # create temp file folder
    args.output_dir = folder_path_from(args.output_dir, create_not_found=True)
    log_path = folder_path_from(os.path.join(args.output_dir, 'logs'), create_not_found=True)
    tmp_file_path = folder_path_from(os.path.join(args.output_dir, 'tmp'), create_not_found=True)
    split_bed_path = folder_path_from(os.path.join(tmp_file_path, 'split_beds'), create_not_found=True)
    split_indel_bed_path = folder_path_from(os.path.join(tmp_file_path, 'split_indel_beds'),
                                            create_not_found=True) if not args.disable_indel_calling else None
    candidates_path = folder_path_from(os.path.join(tmp_file_path, 'candidates'), create_not_found=True)
    pileup_tensor_can_affirmative_path = folder_path_from(os.path.join(tmp_file_path, 'pileup_tensor_can_affirmative'),
                                                          create_not_found=True)
    pileup_tensor_can_negational_path = folder_path_from(os.path.join(tmp_file_path, 'pileup_tensor_can_negational'),
                                                         create_not_found=True)
    vcf_output_path = folder_path_from(os.path.join(tmp_file_path, 'vcf_output'), create_not_found=True)

    if args.platform != 'ilmn':
        phasing_log_path = folder_path_from(os.path.join(args.output_dir, 'logs', 'phasing_log'), create_not_found=True)
        phasing_phased_vcf_output_path = folder_path_from(
            os.path.join(tmp_file_path, 'phasing_output/phased_vcf_output'), create_not_found=True)
        phasing_phased_bam_output_path = folder_path_from(
            os.path.join(tmp_file_path, 'phasing_output/phased_bam_output'), create_not_found=True)

    output_path = OutputPath(log_path=log_path,
                             tmp_file_path=tmp_file_path,
                             split_bed_path=split_bed_path,
                             split_indel_bed_path=split_indel_bed_path,
                             candidates_path=candidates_path,
                             pileup_tensor_can_affirmative_path=pileup_tensor_can_affirmative_path,
                             pileup_tensor_can_negational_path=pileup_tensor_can_negational_path,
                             vcf_output_path=vcf_output_path)
    return output_path


def check_version(tool, pos=None, is_pypy=False):
    try:
        if is_pypy:
            proc = subprocess.run("{} -c 'import sys; print (sys.version)'".format(tool), stdout=subprocess.PIPE,
                                  shell=True)
        else:
            proc = subprocess.run([tool, "--version"], stdout=subprocess.PIPE)
        if proc.returncode != 0:
            return None
        first_line = proc.stdout.decode().split("\n", 1)[0]
        version = first_line.split()[pos]
        version = version_parse(version)
    except Exception:
        return None

    return version


def check_skip_steps_legal(args):
    skip_steps = args.skip_steps
    skip_steps_list = skip_steps.rstrip().split(",")
    if len(skip_steps_list) == 0:
        sys.exit(log_error("[ERROR] --skip_steps option provided but no skip steps index found"))
    for step in skip_steps_list:
        if int(step) < 1 or int(step) > MAX_STEP:
            sys.exit(log_error(
                "[ERROR] --skip_steps option provided but contains invalid skip steps index, should be 1-index"))


def check_python_path():
    python_path = subprocess.run("which python", stdout=subprocess.PIPE, shell=True).stdout.decode().rstrip()
    sys.exit(log_error("[ERROR] Current python execution path: {}".format(python_path)))


def check_python_version(python):
    python_path = subprocess.run("{} --version".format(python), stdout=subprocess.PIPE,
                                 shell=True).stdout.decode().rstrip()
    return python_path.split(' ')[1]


def check_tools_version(args):
    required_tool_version = {
        'python': version_parse('3.9.0'),
        'pypy': version_parse('3.6'),
        'samtools': version_parse('1.10'),
        'whatshap': version_parse('1.0'),
        'parallel': version_parse('20191122'),
    }

    tool_version = {
        'python': version_parse(check_python_version(args.python)),
        'pypy': check_version(tool=args.pypy, pos=0, is_pypy=True),
        'samtools': check_version(tool=args.samtools, pos=1),
        'parallel': check_version(tool=args.parallel, pos=2),
    }

    for tool, version in tool_version.items():
        required_version = required_tool_version[tool]
        if version is None:
            logging(log_error(
                "[ERROR] {} not found, please check if you are in the conda virtual environment".format(tool)))
            check_python_path()
        elif version < required_version:
            logging(
                log_error("[ERROR] Tool version not match, please check if you are in the conda virtual environment"))
            logging(' '.join([str(item).ljust(10) for item in ["Tool", "Version", "Required"]]))
            error_info = ' '.join([str(item).ljust(10) for item in [tool, version, '>=' + str(required_version)]])
            logging(error_info)
            check_python_path()
    return


def check_contig_in_bam(bam_fn, sorted_contig_list, samtools, allow_none=False, is_tumor=False):
    flag = 'tumor' if is_tumor else None
    if allow_none and bam_fn is None:
        return sorted_contig_list, True
    bai_process = subprocess_popen(shlex.split("{} idxstats {}".format(samtools, bam_fn)))
    contig_with_read_support_set = set()
    for row_id, row in enumerate(bai_process.stdout):
        row = row.split('\t')
        if len(row) != 4:
            continue
        contig_name, contig_length, mapped_reads, unmapped_reads = row
        if contig_name not in sorted_contig_list:
            continue
        if int(mapped_reads) > 0:
            contig_with_read_support_set.add(contig_name)
    for contig_name in sorted_contig_list:
        if contig_name not in contig_with_read_support_set:
            logging(log_warning(
                "[WARNING] Contig name {} provided but no mapped reads found in {} BAM, skip!".format(contig_name,
                                                                                                      flag)))
    filtered_sorted_contig_list = [item for item in sorted_contig_list if item in contig_with_read_support_set]

    found_contig = True
    if len(filtered_sorted_contig_list) == 0:
        found_contig = False
        logging(log_warning(
            "[WARNING] No mapped reads found in {} BAM for provided contigs set {}".format(
                flag, ' '.join(sorted_contig_list))))

    return filtered_sorted_contig_list, found_contig


def check_threads(args):
    threads = args.threads
    # sched_getaffinity is not exist in pypy
    try:
        sched_getaffinity_list = list(os.sched_getaffinity(0))
        num_cpus = len(sched_getaffinity_list)
    except:
        num_cpus = int(subprocess.run(args.python + " -c \"import os; print(len(os.sched_getaffinity(0)))\"", \
                                      stdout=subprocess.PIPE, shell=True).stdout.decode().rstrip())

    if threads > num_cpus:
        logging(log_warning(
            '[WARNING] Threads setting {} is larger than the number of available threads {} in the system,'.format(
                threads, num_cpus)))
        logging(log_warning('Set --threads={} for better parallelism.'.format(num_cpus)))
        args.threads = num_cpus
    return args


def split_extend_vcf(genotyping_mode_vcf_fn, output_fn):
    expand_region_size = param.no_of_positions
    output_ctg_dict = defaultdict(list)
    unzip_process = subprocess_popen(shlex.split("gzip -fdc %s" % (genotyping_mode_vcf_fn)))

    for row_id, row in enumerate(unzip_process.stdout):
        if row[0] == '#':
            continue
        columns = row.strip().split(maxsplit=3)
        ctg_name = columns[0]

        center_pos = int(columns[1])
        ctg_start, ctg_end = center_pos - 1, center_pos
        if ctg_start < 0:
            sys.exit(
                log_error(
                    "[ERROR] Invalid VCF input at the {}-th row {} {}".format(row_id + 1, ctg_name, center_pos)))
        if ctg_start - expand_region_size < 0:
            continue
        expand_ctg_start = ctg_start - expand_region_size
        expand_ctg_end = ctg_end + expand_region_size

        output_ctg_dict[ctg_name].append(
            ' '.join([ctg_name, str(expand_ctg_start), str(expand_ctg_end)]))

    for key, value in output_ctg_dict.items():
        ctg_output_fn = os.path.join(output_fn, key)
        with open(ctg_output_fn, 'w') as output_file:
            output_file.write('\n'.join(value))

    unzip_process.stdout.close()
    unzip_process.wait()

    know_vcf_contig_set = set(list(output_ctg_dict.keys()))

    return know_vcf_contig_set


def split_extend_bed(bed_fn, output_fn, contig_set=None, expand_region=True):
    expand_region_size = param.no_of_positions
    if not expand_region:
        expand_region_size = 0
    output_ctg_dict = defaultdict(list)
    unzip_process = subprocess_popen(shlex.split("gzip -fdc %s" % (bed_fn)))
    for row_id, row in enumerate(unzip_process.stdout):
        if row[0] == '#':
            continue
        columns = row.strip().split()
        ctg_name = columns[0]
        if contig_set and ctg_name not in contig_set:
            continue

        ctg_start, ctg_end = int(columns[1]), int(columns[2])

        if ctg_end < ctg_start or ctg_start < 0 or ctg_end < 0:
            sys.exit(log_error(
                "[ERROR] Invalid BED input at the {}-th row {} {} {}".format(row_id + 1, ctg_name, ctg_start, ctg_end)))
        expand_ctg_start = max(0, ctg_start - expand_region_size)
        expand_ctg_end = max(0, ctg_end + expand_region_size)
        output_ctg_dict[ctg_name].append(
            ' '.join([ctg_name, str(expand_ctg_start), str(expand_ctg_end)]))

    for key, value in output_ctg_dict.items():
        ctg_output_fn = os.path.join(output_fn, key)
        with open(ctg_output_fn, 'w') as output_file:
            output_file.write('\n'.join(value))

    unzip_process.stdout.close()
    unzip_process.wait()


def write_region_bed(region):
    try:
        ctg_name, start_end = region.split(':')
        ctg_start, ctg_end = int(start_end.split('-')[0]) - 1, int(start_end.split('-')[1]) - 1  # bed format
    except:
        sys.exit("[ERROR] Please use the correct format for --region: ctg_name:start-end, your input is {}".format(
            region))
    if ctg_end < ctg_start or ctg_start < 0 or ctg_end < 0:
        sys.exit("[ERROR] Invalid region input: {}".format(region))

    output_bed_path = os.path.join(args.output_dir, 'tmp', 'region.bed')
    with open(output_bed_path, 'w') as f:
        f.write('\t'.join([ctg_name, str(ctg_start), str(ctg_end)]) + '\n')
    return output_bed_path


def check_contigs_intersection(args, fai_fn):
    MIN_CHUNK_LENGTH = 200000
    MAX_CHUNK_LENGTH = 20000000
    is_include_all_contigs = args.include_all_ctgs
    is_bed_file_provided = args.bed_fn is not None or args.region is not None
    is_indel_bed_file_provided = args.call_indels_only_in_these_regions is not None
    is_known_vcf_file_provided = args.genotyping_mode_vcf_fn is not None
    is_ctg_name_list_provided = args.ctg_name is not None

    if args.region is not None:
        args.bed_fn = write_region_bed(args.region)

    split_bed_path = os.path.join(args.output_dir, 'tmp', 'split_beds')
    split_indel_bed_path = os.path.join(args.output_dir, 'tmp',
                                        'split_indel_beds') if not args.disable_indel_calling else None
    tree = bed_tree_from(bed_file_path=args.bed_fn, region=args.region)
    know_vcf_contig_set = split_extend_vcf(genotyping_mode_vcf_fn=args.genotyping_mode_vcf_fn,
                                           output_fn=split_bed_path) if is_known_vcf_file_provided else set()
    contig_set = set(args.ctg_name.split(',')) if is_ctg_name_list_provided else set()

    if not args.include_all_ctgs:
        logging("[INFO] --include_all_ctgs not enabled, use chr{1..22,X,Y} and {1..22,X,Y} by default")
    else:
        logging("[INFO] --include_all_ctgs enabled")

    if is_ctg_name_list_provided and is_bed_file_provided:
        logging(log_warning(
            "[WARNING] both --ctg_name and --bed_fn provided, will only proceed with the contigs appeared in both"))

    if is_ctg_name_list_provided and is_known_vcf_file_provided:
        logging(log_warning(
            "[WARNING] both --ctg_name and --genotyping_mode_vcf_fn provided, will only proceed with the contigs appeared in both"))

    if is_ctg_name_list_provided:
        contig_set = contig_set.intersection(
            set(tree.keys())) if is_bed_file_provided else contig_set
        contig_set = contig_set.intersection(
            know_vcf_contig_set) if is_known_vcf_file_provided else contig_set
    else:
        contig_set = contig_set.union(
            set(tree.keys())) if is_bed_file_provided else contig_set

        contig_set = contig_set.union(
            know_vcf_contig_set) if is_known_vcf_file_provided else contig_set

    # if each split region is too small(long) for given default chunk num, will increase(decrease) the total chunk num
    default_chunk_num = 0
    DEFAULT_CHUNK_SIZE = args.chunk_size
    contig_length_list = []
    contig_chunk_num = {}

    with open(fai_fn, 'r') as fai_fp:
        for row in fai_fp:
            columns = row.strip().split("\t")
            contig_name, contig_length = columns[0], int(columns[1])
            if not is_include_all_contigs and (
                    not (is_bed_file_provided or is_ctg_name_list_provided or is_known_vcf_file_provided)) and str(
                contig_name) not in major_contigs:
                continue

            if is_bed_file_provided and contig_name not in tree:
                continue
            if is_ctg_name_list_provided and contig_name not in contig_set:
                continue
            if is_known_vcf_file_provided and contig_name not in contig_set:
                continue

            contig_set.add(contig_name)
            contig_length_list.append(contig_length)
            chunk_num = int(
                contig_length / float(DEFAULT_CHUNK_SIZE)) + 1 if contig_length % DEFAULT_CHUNK_SIZE else int(
                contig_length / float(DEFAULT_CHUNK_SIZE))
            contig_chunk_num[contig_name] = max(chunk_num, 1)

    if default_chunk_num > 0:
        min_chunk_length = min(contig_length_list) / float(default_chunk_num)
        max_chunk_length = max(contig_length_list) / float(default_chunk_num)

    contigs_order = major_contigs_order + list(contig_set)

    sorted_contig_list = sorted(list(contig_set), key=lambda x: contigs_order.index(x))

    if not len(contig_set):
        if is_bed_file_provided:
            all_contig_in_bed = ' '.join(list(tree.keys()))
            logging(log_warning(
                "[WARNING] No contig in --bed_fn was found in the reference, contigs in BED {}: {}".format(args.bed_fn,
                                                                                                           all_contig_in_bed)))
        if is_known_vcf_file_provided:
            all_contig_in_vcf = ' '.join(list(know_vcf_contig_set))
            logging(log_warning(
                "[WARNING] No contig in --genotyping_mode_vcf_fn was found in the reference, contigs in VCF {}: {}".format(
                    args.genotyping_mode_vcf_fn, all_contig_in_vcf)))
        if is_ctg_name_list_provided:
            all_contig_in_ctg_name = ' '.join(args.ctg_name.split(','))
            logging(log_warning(
                "[WARNING] No contig in --ctg_name was found in the reference, contigs in contigs list: {}".format(
                    all_contig_in_ctg_name)))
        found_contig = False
    else:
        for c in sorted_contig_list:
            if c not in contig_chunk_num:
                logging(log_warning(("[WARNING] Contig {} given but not found in the reference".format(c))))

        # check contig in bam have support reads
        sorted_contig_list, tumor_found_contig = check_contig_in_bam(bam_fn=args.tumor_bam_fn,
                                                                     sorted_contig_list=sorted_contig_list,
                                                                     samtools=args.samtools, is_tumor=True)

        found_contig = tumor_found_contig

    if not found_contig:
        log_warning("[WARNING] Exit calling because no contig was found in BAM!")
        sys.exit(0)
    logging('[INFO] Call variants in contigs: {}'.format(' '.join(sorted_contig_list)))
    logging('[INFO] Number of chunks for each contig: {}'.format(
        ' '.join([str(contig_chunk_num[c]) for c in sorted_contig_list])))

    if default_chunk_num > 0 and max_chunk_length > MAX_CHUNK_LENGTH:
        logging(log_warning(
            '[WARNING] The maximum chunk size set {} is larger than the suggested maximum chunk size {}, consider setting a larger --chunk_num= instead for better parallelism.'.format(
                min_chunk_length, MAX_CHUNK_LENGTH)))

    elif default_chunk_num > 0 and min_chunk_length < MIN_CHUNK_LENGTH:
        logging(log_warning(
            '[WARNING] The minimum chunk size set {} is smaller than the suggested  minimum chunk size {}, consider setting a smaller --chunk_num= instead.'.format(
                min_chunk_length, MIN_CHUNK_LENGTH)))

    if default_chunk_num == 0 and max(contig_length_list) < DEFAULT_CHUNK_SIZE / 5:
        logging(log_warning(
            '[WARNING] The length of the longest contig {} is more than five times smaller than the default chunk size {}, consider setting a smaller --chunk_size= instead for better parallelism.'.format(
                max(contig_length_list), DEFAULT_CHUNK_SIZE)))

    if is_bed_file_provided:
        split_extend_bed(bed_fn=args.bed_fn, output_fn=split_bed_path, contig_set=contig_set)

    if not args.disable_indel_calling and is_indel_bed_file_provided:
        split_extend_bed(bed_fn=args.call_indels_only_in_these_regions, output_fn=split_indel_bed_path,
                         contig_set=contig_set, expand_region=False)

    contig_path = os.path.join(args.output_dir, 'tmp', 'CONTIGS')
    with open(contig_path, 'w') as output_file:
        output_file.write('\n'.join(sorted_contig_list))

    if not args.disable_verdict:
        contigs_order = ["chr" + str(a) for a in list(range(1, 23)) + ["X"]]
        verdict_flag = set(contigs_order).intersection(set(sorted_contig_list)) is not None
        if not verdict_flag:
            args.disable_verdict = True
            logging(log_warning(
                "[WARNING] Verdict currently only works for GRCh38 reference genome, apply the --disable_verdict option!"))

    chunk_list = []
    chunk_list_path = os.path.join(args.output_dir, 'tmp', 'CHUNK_LIST')
    with open(chunk_list_path, 'w') as output_file:
        for contig_name in sorted_contig_list:
            chunk_num = contig_chunk_num[contig_name] if args.chunk_num is None else args.chunk_num
            for chunk_id in range(1, chunk_num + 1):
                output_file.write(contig_name + ' ' + str(chunk_id) + ' ' + str(chunk_num) + '\n')
                chunk_list.append((contig_name, chunk_id, chunk_num))
    args.chunk_list = chunk_list

    return args


def check_args(args):
    if args.conda_prefix is None:
        if 'CONDA_PREFIX' in os.environ:
            args.conda_prefix = os.environ['CONDA_PREFIX']
        else:
            try:
                python_path = subprocess.run('which python', stdout=subprocess.PIPE,
                                             shell=True).stdout.decode().rstrip()
                args.conda_prefix = os.path.dirname(os.path.dirname(python_path))
            except:
                sys.exit(log_error("[ERROR] Conda prefix not found, please activate a correct conda environment."))

    args.tumor_bam_fn = file_path_from(file_name=args.tumor_bam_fn, exit_on_not_found=True)
    tumor_bai_fn = file_path_from(file_name=args.tumor_bam_fn, suffix=".bai", exit_on_not_found=False, sep='.')
    tumor_crai_fn = file_path_from(file_name=args.tumor_bam_fn, suffix=".crai", exit_on_not_found=False, sep='.')
    tumor_csi_fn = file_path_from(file_name=args.tumor_bam_fn, suffix=".csi", exit_on_not_found=False, sep='.')

    args.ref_fn = file_path_from(file_name=args.ref_fn, exit_on_not_found=True)
    fai_fn = file_path_from(file_name=args.ref_fn, suffix=".fai", exit_on_not_found=True, sep='.')
    args.bed_fn = file_path_from(file_name=args.bed_fn, exit_on_not_found=True, allow_none=True)
    args.genotyping_mode_vcf_fn = file_path_from(file_name=args.genotyping_mode_vcf_fn, exit_on_not_found=True,
                                                 allow_none=True)
    args.hybrid_mode_vcf_fn = file_path_from(file_name=args.hybrid_mode_vcf_fn, exit_on_not_found=True, allow_none=True)

    if args.platform in param.model_name_platform_dict:
        updated_platform = param.model_name_platform_dict[args.platform]
        logging(
            "[INFO] Platform parameter is using ONT model name format, change --platform {} to --platform {}".format(
                args.platform, updated_platform))
        args.platform = updated_platform

    if tumor_bai_fn is None and tumor_crai_fn is None and tumor_csi_fn is None:
        sys.exit(log_error(
            "[ERROR] Tumor BAM index file {} or {} not found. Please run `samtools index $BAM` first.".format(
                args.tumor_bam_fn + '.bai',
                args.tumor_bam_fn + '.crai')))

    if not args.disable_indel_calling and args.platform not in {'ont_r10_dorado_sup_4khz', 'ont_r10_dorado_hac_4khz',
                                                                'ont_r10_dorado_sup_5khz',
                                                                'ont_r10_guppy_sup_4khz', 'ont_r10_guppy_hac_5khz',
                                                                'ont_r10_dorado_4khz',
                                                                'ont_r10_dorado_5khz', 'ont_r10_guppy',
                                                                'ont_r10_guppy_4khz', 'ont_r10_guppy_5khz', 'ilmn',
                                                                'hifi_revio'}:
        sys.exit(log_error(
            "[ERROR] Indel calling only support 'ont_r10_dorado_sup_4khz', 'ont_r10_dorado_hac_4khz', 'ont_r10_dorado_sup_5khz', 'ont_r10_guppy_sup_4khz', 'ont_r10_guppy_hac_5khz', 'ilmn', and 'hifi_revio' platform"))

    if args.genotyping_mode_vcf_fn is not None and args.hybrid_mode_vcf_fn is not None:
        sys.exit(log_error("[ERROR] Please provide either --genotyping_mode_vcf_fn or --hybrid_mode_vcf_fn only"))

    if args.snv_pileup_affirmative_model_path is None:
        if args.platform == 'ont_r10_guppy_sup_4khz' or args.platform == 'ont_r10_guppy_4khz' or args.platform == 'ont_r10_guppy':
            args.snv_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                  'ont_r10_guppy_sup_4khz', 'pileup_affirmative.pkl')
        elif args.platform == 'ont_r10_dorado_sup_5khz' or args.platform == 'ont_r10_dorado_5khz':
            args.snv_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                  'ont_r10_dorado_sup_5khz', 'pileup_affirmative.pkl')
        elif args.platform == 'ont_r10_dorado_sup_4khz' or args.platform == 'ont_r10_dorado_4khz':
            args.snv_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                  'ont_r10_dorado_sup_4khz', 'pileup_affirmative.pkl')
        elif args.platform == 'ont_r10_dorado_hac_4khz':
            args.snv_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                  'ont_r10_dorado_hac_4khz', 'pileup_affirmative.pkl')
        elif args.platform == 'ont_r10_guppy_hac_5khz' or args.platform == 'ont_r10_guppy_5khz':
            args.snv_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                  'ont_r10_guppy_hac_5khz', 'pileup_affirmative.pkl')
        else:
            args.snv_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                  args.platform, 'pileup_affirmative.pkl')

    if args.snv_pileup_negational_model_path is None:
        if args.platform == 'ont_r10_guppy_sup_4khz' or args.platform == 'ont_r10_guppy_4khz' or args.platform == 'ont_r10_guppy':
            args.snv_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_guppy_sup_4khz', 'pileup_negational.pkl')
        elif args.platform == 'ont_r10_dorado_sup_5khz' or args.platform == 'ont_r10_dorado_5khz':
            args.snv_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_dorado_sup_5khz', 'pileup_negational.pkl')
        elif args.platform == 'ont_r10_dorado_sup_4khz' or args.platform == 'ont_r10_dorado_4khz':
            args.snv_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_dorado_sup_4khz', 'pileup_negational.pkl')
        elif args.platform == 'ont_r10_dorado_hac_4khz':
            args.snv_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_dorado_hac_4khz', 'pileup_negational.pkl')
        elif args.platform == 'ont_r10_guppy_hac_5khz' or args.platform == 'ont_r10_guppy_5khz':
            args.snv_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_guppy_hac_5khz', 'pileup_negational.pkl')
        else:
            args.snv_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 args.platform, 'pileup_negational.pkl')

    args.snv_pileup_affirmative_model_path = file_path_from(file_name=args.snv_pileup_affirmative_model_path,
                                                            exit_on_not_found=True, is_directory=False,
                                                            allow_none=False)

    args.snv_pileup_negational_model_path = file_path_from(file_name=args.snv_pileup_negational_model_path,
                                                           exit_on_not_found=True, is_directory=False, allow_none=False)

    if args.snv_likelihood_matrix_data is None:
        if args.platform == 'ont_r10_guppy_sup_4khz' or args.platform == 'ont_r10_guppy_4khz' or args.platform == 'ont_r10_guppy':
            args.snv_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                           'ont_r10_guppy_sup_4khz', 'likelihood_matrix.txt')
        elif args.platform == 'ont_r10_dorado_sup_5khz' or args.platform == 'ont_r10_dorado_5khz':
            args.snv_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                           'ont_r10_dorado_sup_5khz', 'likelihood_matrix.txt')
        elif args.platform == 'ont_r10_dorado_sup_4khz' or args.platform == 'ont_r10_dorado_4khz':
            args.snv_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                           'ont_r10_dorado_sup_4khz', 'likelihood_matrix.txt')
        elif args.platform == 'ont_r10_dorado_hac_4khz':
            args.snv_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                           'ont_r10_dorado_hac_4khz', 'likelihood_matrix.txt')
        elif args.platform == 'ont_r10_guppy_hac_5khz' or args.platform == 'ont_r10_guppy_5khz':
            args.snv_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                           'ont_r10_guppy_hac_5khz', 'likelihood_matrix.txt')
        else:
            args.snv_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models', args.platform,
                                                           'likelihood_matrix.txt')

    if not args.disable_indel_calling:
        if args.indel_pileup_affirmative_model_path is None:
            if args.platform == 'ont_r10_guppy_sup_4khz' or args.platform == 'ont_r10_guppy_4khz' or args.platform == 'ont_r10_guppy':
                args.indel_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                        'ont_r10_guppy_sup_4khz', 'indel',
                                                                        'pileup_affirmative.pkl')
            elif args.platform == 'ont_r10_dorado_sup_5khz' or args.platform == 'ont_r10_dorado_5khz':
                args.indel_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                        'ont_r10_dorado_sup_5khz', 'indel',
                                                                        'pileup_affirmative.pkl')
            elif args.platform == 'ont_r10_dorado_sup_4khz' or args.platform == 'ont_r10_dorado_4khz':
                args.indel_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                        'ont_r10_dorado_sup_4khz', 'indel',
                                                                        'pileup_affirmative.pkl')
            elif args.platform == 'ont_r10_dorado_hac_4khz':
                args.indel_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                        'ont_r10_dorado_hac_4khz', 'indel',
                                                                        'pileup_affirmative.pkl')
            elif args.platform == 'ont_r10_guppy_hac_5khz' or args.platform == 'ont_r10_guppy_5khz':
                args.indel_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                        'ont_r10_guppy_hac_5khz', 'indel',
                                                                        'pileup_affirmative.pkl')
            else:
                args.indel_pileup_affirmative_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                        args.platform, 'indel',
                                                                        'pileup_affirmative.pkl')

        if args.indel_pileup_negational_model_path is None:
            if args.platform == 'ont_r10_guppy_sup_4khz' or args.platform == 'ont_r10_guppy_4khz' or args.platform == 'ont_r10_guppy':
                args.indel_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                       'ont_r10_guppy_sup_4khz', 'indel',
                                                                       'pileup_negational.pkl')
            elif args.platform == 'ont_r10_dorado_sup_5khz' or args.platform == 'ont_r10_dorado_5khz':
                args.indel_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                       'ont_r10_dorado_sup_5khz', 'indel',
                                                                       'pileup_negational.pkl')
            elif args.platform == 'ont_r10_dorado_sup_4khz' or args.platform == 'ont_r10_dorado_4khz':
                args.indel_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                       'ont_r10_dorado_sup_4khz', 'indel',
                                                                       'pileup_negational.pkl')
            elif args.platform == 'ont_r10_dorado_hac_4khz':
                args.indel_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                       'ont_r10_dorado_hac_4khz', 'indel',
                                                                       'pileup_negational.pkl')
            elif args.platform == 'ont_r10_guppy_hac_5khz' or args.platform == 'ont_r10_guppy_5khz':
                args.indel_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                       'ont_r10_guppy_hac_5khz', 'indel',
                                                                       'pileup_negational.pkl')
            else:
                args.indel_pileup_negational_model_path = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                       args.platform, 'indel', 'pileup_negational.pkl')

        args.indel_pileup_affirmative_model_path = file_path_from(file_name=args.indel_pileup_affirmative_model_path,
                                                                  exit_on_not_found=True,
                                                                  is_directory=False, allow_none=False)

        args.indel_pileup_negational_model_path = file_path_from(file_name=args.indel_pileup_negational_model_path,
                                                                 exit_on_not_found=True,
                                                                 is_directory=False, allow_none=False)

        if args.indel_likelihood_matrix_data is None:
            if args.platform == 'ont_r10_guppy_sup_4khz' or args.platform == 'ont_r10_guppy_4khz' or args.platform == 'ont_r10_guppy':
                args.indel_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_guppy_sup_4khz', 'indel',
                                                                 'likelihood_matrix.txt')
            elif args.platform == 'ont_r10_dorado_sup_5khz' or args.platform == 'ont_r10_dorado_5khz':
                args.indel_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_dorado_sup_5khz', 'indel',
                                                                 'likelihood_matrix.txt')
            elif args.platform == 'ont_r10_dorado_sup_4khz' or args.platform == 'ont_r10_dorado_4khz':
                args.indel_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_dorado_sup_4khz', 'indel',
                                                                 'likelihood_matrix.txt')
            elif args.platform == 'ont_r10_dorado_hac_4khz':
                args.indel_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_dorado_hac_4khz', 'indel',
                                                                 'likelihood_matrix.txt')
            elif args.platform == 'ont_r10_guppy_hac_5khz' or args.platform == 'ont_r10_guppy_5khz':
                args.indel_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 'ont_r10_guppy_hac_5khz', 'indel',
                                                                 'likelihood_matrix.txt')
            else:
                args.indel_likelihood_matrix_data = os.path.join(args.conda_prefix, 'bin', 'clairs-to_models',
                                                                 args.platform,
                                                                 'indel', 'likelihood_matrix.txt')

    default_gnomad_resource = os.path.join(args.conda_prefix, 'bin', 'clairs-to_databases',
                                           'gnomad.r2.1.af-ge-0.001.sites.vcf.gz')
    default_dbsnp_resource = os.path.join(args.conda_prefix, 'bin', 'clairs-to_databases',
                                          'dbsnp.b138.non-somatic.sites.vcf.gz')
    default_1kgpon_resource = os.path.join(args.conda_prefix, 'bin', 'clairs-to_databases', '1000g-pon.sites.vcf.gz')

    default_gnomad_resource = file_path_from(file_name=default_gnomad_resource, exit_on_not_found=True,
                                             is_directory=False, allow_none=True)
    default_dbsnp_resource = file_path_from(file_name=default_dbsnp_resource, exit_on_not_found=True,
                                            is_directory=False, allow_none=True)
    default_1kgpon_resource = file_path_from(file_name=default_1kgpon_resource, exit_on_not_found=True,
                                             is_directory=False, allow_none=True)

    default_indel_bed_resource = os.path.join(args.conda_prefix, 'bin', 'clairs-to_databases',
                                              'GRCh38Chr1-22XY_excludedGIABStratifV3.3AllDifficultRegions_includedCMRGv1.0.bed')

    if args.bed_fn is not None and args.call_indels_only_in_these_regions is not None:
        logging(log_warning(
            "[WARNING] `--bed_fn` will supersede `--call_indels_only_in_these_regions`."))
    if args.call_indels_only_in_these_regions is None:
        args.call_indels_only_in_these_regions = file_path_from(file_name=default_indel_bed_resource,
                                                                exit_on_not_found=True,
                                                                is_directory=False, allow_none=True)

    if args.panel_of_normals is not None:
        if args.panel_of_normals == 'None' or args.panel_of_normals == 'Null' or args.panel_of_normals == ' ':
            args.disable_nonsomatic_tagging = True
        else:
            panel_of_normals_list = list(args.panel_of_normals.split(','))
            for pon in panel_of_normals_list:
                pon_path = file_path_from(file_name=str(pon), exit_on_not_found=True, is_directory=False,
                                          allow_none=True)
            if str(default_gnomad_resource) not in panel_of_normals_list:
                logging(log_warning(
                    "[INFO] Default {} PoN is not included!".format(str(default_gnomad_resource))))
            if str(default_dbsnp_resource) not in panel_of_normals_list:
                logging(log_warning(
                    "[INFO] Default {} PoN is not included!".format(str(default_dbsnp_resource))))
            if str(default_1kgpon_resource) not in panel_of_normals_list:
                logging(log_warning(
                    "[INFO] Default {} PoN is not included!".format(str(default_1kgpon_resource))))
            args.panel_of_normals = args.panel_of_normals
            if args.panel_of_normals_require_allele_matching is not None:
                ori_panel_of_normals_require_allele_matching_list = list(
                    args.panel_of_normals_require_allele_matching.split(','))
                if len(panel_of_normals_list) != len(ori_panel_of_normals_require_allele_matching_list):
                    logging(log_warning(
                        "[WARNING] Please use `--panel_of_normals_require_allele_matching` together with `--panel_of_normals`."))
                if args.panel_of_normals_require_allele_matching == 'None' or args.panel_of_normals_require_allele_matching == 'Null' or args.panel_of_normals_require_allele_matching == ' ':
                    panel_of_normals_require_allele_matching_list = ['True'] * len(panel_of_normals_list)
                    args.panel_of_normals_require_allele_matching = ','.join(
                        panel_of_normals_require_allele_matching_list)
                else:
                    args.panel_of_normals_require_allele_matching = args.panel_of_normals_require_allele_matching
            else:
                panel_of_normals_require_allele_matching_list = ['True'] * len(panel_of_normals_list)
                args.panel_of_normals_require_allele_matching = ','.join(panel_of_normals_require_allele_matching_list)
    else:
        args.panel_of_normals = str(default_gnomad_resource) + ',' + str(default_dbsnp_resource) + ',' + str(
            default_1kgpon_resource)
        args.panel_of_normals_require_allele_matching = 'True' + ',' + 'True' + ',' + 'False'

    if args.whatshap is None:
        args.whatshap = os.path.join(args.conda_prefix, 'bin', 'whatshap')
    if args.longphase is None:
        args.longphase = os.path.join(args.conda_prefix, 'bin', 'longphase')
    args.use_longphase_for_intermediate_phasing = False if args.use_whatshap_for_intermediate_phasing is True else True
    if args.use_longphase_for_intermediate_phasing and not os.path.exists(args.longphase):
        sys.exit(log_error("[ERROR] Cannot find longphase at {}".format(args.longphase)))
    if args.use_whatshap_for_intermediate_phasing and not os.path.exists(args.whatshap):
        sys.exit(log_error("[ERROR] Cannot find whatshap at {}".format(args.whatshap)))
    if args.use_longphase_for_intermediate_haplotagging is None:
        args.use_longphase_for_intermediate_haplotagging = True
    if args.use_longphase_for_intermediate_haplotagging and not os.path.exists(args.longphase):
        sys.exit(log_error("[ERROR] Cannot find longphase at {}".format(args.longphase)))

    if args.snv_min_af is None:
        args.snv_min_af = param.snv_min_af
    if args.indel_min_af is None:
        if not args.disable_indel_calling:
            args.indel_min_af = param.indel_min_af
        else:
            args.indel_min_af = 1.0
    if args.min_coverage is None:
        args.min_coverage = param.min_coverage
    if args.chunk_size is None:
        args.chunk_size = 5000000

    if args.min_bq is None:
        args.min_bq = param.min_bq_dict[args.platform]

    if args.platform not in {'ont_r10_dorado_sup_4khz', 'ont_r10_dorado_hac_4khz', 'ont_r10_dorado_sup_5khz',
                             'ont_r10_guppy_sup_4khz', 'ont_r10_guppy_hac_5khz', 'ont_r10_dorado_4khz',
                             'ont_r10_dorado_5khz', 'ont_r10_guppy', 'ont_r10_guppy_4khz', 'ont_r10_guppy_5khz', 'ilmn',
                             'hifi_revio'}:
        logging(log_error(
            '[ERROR] Invalid platform input, optional: {ont_r10_dorado_sup_4khz, ont_r10_dorado_hac_4khz, ont_r10_dorado_sup_5khz, ont_r10_guppy_sup_4khz, ont_r10_guppy_hac_5khz, ilmn, hifi_revio}'))

    if args.qual is None:
        args.qual = param.min_thred_qual[args.platform] if args.platform in param.min_thred_qual else \
            param.min_thred_qual['ont']
        if args.qual_cutoff_phaseable_region is None:
            args.qual_cutoff_phaseable_region = param.min_phaseable_thred_qual[
                args.platform] if args.platform in param.min_phaseable_thred_qual else \
                param.min_phaseable_thred_qual['ont']
        if args.qual_cutoff_unphaseable_region is None:
            args.qual_cutoff_unphaseable_region = param.min_unphaseable_thred_qual[
                args.platform] if args.platform in param.min_unphaseable_thred_qual else \
                param.min_unphaseable_thred_qual['ont']
    else:
        if args.qual_cutoff_phaseable_region is not None or args.qual_cutoff_unphaseable_region is not None:
            logging(log_warning(
                "[WARNING] `--qual` will supersede `--qual_cutoff_phaseable_region` and `--qual_cutoff_unphaseable_region`."))
        args.qual_cutoff_phaseable_region = args.qual
        args.qual_cutoff_unphaseable_region = args.qual
    if args.skip_steps is not None:
        check_skip_steps_legal(args)

    if args.disable_intermediate_phasing:
        args.phase_tumor = False
    if args.phase_tumor is None:
        if args.genotyping_mode_vcf_fn is not None:
            logging(log_warning(
                "[WARNING] HET SNPs based phasing is disabled if `--genotyping_mode_vcf_fn` is provided, add `--phase_tumor True` if phasing the tumor is still needed. Please ensure you have sufficient heterozygous variant candidates given in the --genotyping_mode_vcf_fn file, otherwise the phasing step might lead to worse performance."))
        else:
            args.phase_tumor = True if args.platform != 'ilmn' else False

    if not args.disable_verdict:
        ref_contigs_set = set()
        with open(fai_fn, 'r') as fai_fp:
            for row in fai_fp:
                columns = row.strip().split("\t")
                contig_name = columns[0]
                ref_contigs_set.add(contig_name)
        contigs_order = ["chr" + str(a) for a in list(range(1, 23)) + ["X"]]
        verdict_flag = set(contigs_order).intersection(ref_contigs_set) is not None
        if not verdict_flag:
            args.disable_verdict = True
            logging(log_warning(
                "[WARNING] Verdict currently only works for GRCh38 reference genome, apply the --disable_verdict option!"))
        if args.cna_resource_dir is None:
            args.cna_resource_dir = os.path.join(args.conda_prefix, 'bin', 'clairs-to_cna_data', 'reference_files')
        if args.allele_counter_dir is None:
            args.allele_counter_dir = os.path.join(file_directory, 'src', 'verdict', 'allele_counter')
        if not os.path.exists(args.allele_counter_dir):
            args.disable_verdict = True
            logging(log_warning(
                "[WARNING] The allele counter {} is not found, apply the --disable_verdict option!".format(
                    args.allele_counter_dir)))
        if not os.path.exists(args.cna_resource_dir):
            args.disable_verdict = True
            logging(log_warning(
                "[WARNING] The CNA resource directory {} is not found, apply the --disable_verdict option!".format(
                    args.cna_resource_dir)))

    if args.genotyping_mode_vcf_fn is not None or args.hybrid_mode_vcf_fn is not None:
        logging(log_warning(
            "[INFO] Enable --print_ref_calls option and disable --do_not_print_nonsomatic_calls in genotyping mode!"))
        args.print_ref_calls = True
        args.do_not_print_nonsomatic_calls = False
        args.disable_indel_calling = True

    legal_range_from(param_name="threads", x=args.threads, min_num=1, exit_out_of_range=True)
    legal_range_from(param_name="qual", x=args.qual, min_num=0, exit_out_of_range=True)
    legal_range_from(param_name="qual_cutoff_phaseable_region", x=args.qual_cutoff_phaseable_region, min_num=0,
                     exit_out_of_range=True)
    legal_range_from(param_name="qual_cutoff_unphaseable_region", x=args.qual_cutoff_unphaseable_region, min_num=0,
                     exit_out_of_range=True)
    legal_range_from(param_name="min_coverage", x=args.min_coverage, min_num=0, exit_out_of_range=True)
    legal_range_from(param_name="min_bq", x=args.min_bq, min_num=0, exit_out_of_range=True)
    legal_range_from(param_name="snv_min_af", x=args.snv_min_af, min_num=0, max_num=1, exit_out_of_range=True)
    legal_range_from(param_name="indel_min_af", x=args.indel_min_af, min_num=0, max_num=1, exit_out_of_range=True)
    legal_range_from(param_name="chunk_size", x=args.chunk_size, min_num=0, exit_out_of_range=True)

    args.output_path = create_output_folder(args)
    check_tools_version(args=args)
    args = check_threads(args=args)

    args = check_contigs_intersection(args=args, fai_fn=fai_fn)

    return args


def print_args(args):
    logging("")
    logging("[INFO] CALLER VERSION: {}".format(param.version))
    logging("[INFO] TUMOR BAM FILE PATH: {}".format(args.tumor_bam_fn))
    logging("[INFO] REFERENCE FILE PATH: {}".format(args.ref_fn))
    logging("[INFO] PLATFORM: {}".format(args.platform))
    logging("[INFO] THREADS: {}".format(args.threads))
    logging("[INFO] OUTPUT FOLDER: {}".format(args.output_dir))
    logging("[INFO] SNV OUTPUT VCF PATH: {}".format(os.path.join(args.output_dir, args.snv_output_prefix + '.vcf.gz')))
    logging(
        "[INFO] INDEL OUTPUT VCF PATH: {}".format(os.path.join(args.output_dir, args.indel_output_prefix + '.vcf.gz')))
    logging("[INFO] SNV MINIMUM AF: {}".format(args.snv_min_af))
    logging("[INFO] INDEL MINIMUM AF: {}".format(args.indel_min_af))
    logging("[INFO] SNV PILEUP AFFIRMATIVE MODEL PATH: {}".format(args.snv_pileup_affirmative_model_path))
    logging("[INFO] SNV PILEUP NEGATIONAL MODEL PATH: {}".format(args.snv_pileup_negational_model_path))
    logging("[INFO] INDEL PILEUP AFFIRMATIVE MODEL PATH: {}".format(args.indel_pileup_affirmative_model_path))
    logging("[INFO] INDEL PILEUP NEGATIONAL MODEL PATH: {}".format(args.indel_pileup_negational_model_path))
    logging("[INFO] BED FILE PATH: {}".format(args.bed_fn))
    logging("[INFO] SPECIFIED REGIONS FOR CALLING: {}".format(args.region))
    logging("[INFO] REGIONS FOR INDEL CALLING: {}".format(args.call_indels_only_in_these_regions))
    logging("[INFO] CONTIGS FOR CALLING: {}".format(args.ctg_name))
    logging("[INFO] ENABLE INCLUDING ALL CTGS FOR CALLING: {}".format(args.include_all_ctgs))
    logging("[INFO] GENOTYPING MODE VCF FILE PATH: {}".format(args.genotyping_mode_vcf_fn))
    logging("[INFO] HYBRID MODE VCF FILE PATH: {}".format(args.hybrid_mode_vcf_fn))
    logging("[INFO] PANEL OF NORMALS: {}".format(args.panel_of_normals))
    logging("[INFO] PANEL OF NORMALS REQUIRE ALLELE MATCHING: {}".format(args.panel_of_normals_require_allele_matching))
    logging("[INFO] CHUNK SIZE: {}".format(args.chunk_size))
    logging("[INFO] CONDA BINARY PREFIX: {}".format(args.conda_prefix))
    logging("[INFO] SAMTOOLS BINARY PATH: {}".format(args.samtools))
    logging("[INFO] PYTHON BINARY PATH: {}".format(args.python))
    logging("[INFO] PYPY BINARY PATH: {}".format(args.pypy))
    logging("[INFO] PARALLEL BINARY PATH: {}".format(args.parallel))
    logging("[INFO] LONGPHASE BINARY PATH: {}".format(args.longphase))
    logging("[INFO] WHATSHAP BINARY PATH: {}".format(args.whatshap))
    logging("[INFO] ENABLE DRY RUN: {}".format(args.dry_run))
    logging("[INFO] ENABLE REMOVING INTERMEDIATE FILES: {}".format(args.remove_intermediate_dir))
    logging("[INFO] DISABLE INTERMEDIATE PHASING: {}".format(args.disable_intermediate_phasing))
    logging("[INFO] DISABLE INDEL CALLING: {}".format(args.disable_indel_calling))
    logging("[INFO] ENABLE PRINTING REFERENCE CALLS: {}".format(args.print_ref_calls))
    logging("[INFO] ENABLE APPLYING REALIGNMENT: {}".format(args.enable_realignment))
    logging("[INFO] ENABLE APPLYING POSTFILTERING: {}".format(args.enable_postfilter))
    logging("[INFO] ENABLE APPLYING HAPLOTYPE FILTERING: {}".format(args.apply_haplotype_filtering))
    logging("[INFO] DISABLE APPLYING VERDICT: {}".format(args.disable_verdict))
    logging("[INFO] DISABLE APPLYING NON-SOMATIC TAGGING: {}".format(args.disable_nonsomatic_tagging))
    logging("[INFO] DISABLE PRINTING NON-SOMATIC CALLS: {}".format(args.do_not_print_nonsomatic_calls))
    logging("")

    if args.platform.startswith('ont'):
        args.platform = 'ont'

    if args.platform.startswith('hifi'):
        args.platform = 'hifi'

    if args.cmdline is not None and args.cmdline != "":
        with open(args.output_dir + '/tmp/CMD', 'w') as f:
            f.write(args.cmdline + '\n')

    return args


def print_command_line(args):
    try:
        cmdline = os.path.realpath(__file__)
        cmdline += ' --tumor_bam_fn {} '.format(args.tumor_bam_fn)
        cmdline += '--ref_fn {} '.format(args.ref_fn)
        cmdline += '--threads {} '.format(args.threads)
        cmdline += '--platform {} '.format(args.platform)
        cmdline += '--output_dir {} '.format(args.output_dir)
        cmdline += '--snv_output_prefix {} '.format(args.snv_output_prefix) if args.snv_output_prefix != "snv" else ""
        cmdline += '--indel_output_prefix {} '.format(
            args.indel_output_prefix) if args.indel_output_prefix != "indel" else ""
        cmdline += '--sample_name {} '.format(args.sample_name) if args.sample_name != "SAMPLE" else ""
        cmdline += '--ctg_name {} '.format(args.ctg_name) if args.ctg_name is not None else ""
        cmdline += '--include_all_ctgs ' if args.include_all_ctgs else ""
        cmdline += '--region {} '.format(args.region) if args.region is not None else ""
        cmdline += '--bed_fn {} '.format(args.bed_fn) if args.bed_fn is not None else ""
        cmdline += '--call_indels_only_in_these_regions {} '.format(
            args.call_indels_only_in_these_regions) if args.call_indels_only_in_these_regions is not None else ""
        cmdline += '--genotyping_mode_vcf_fn {} '.format(
            args.genotyping_mode_vcf_fn) if args.genotyping_mode_vcf_fn is not None else ""
        cmdline += '--hybrid_mode_vcf_fn {} '.format(
            args.hybrid_mode_vcf_fn) if args.hybrid_mode_vcf_fn is not None else ""
        cmdline += '--qual {} '.format(args.qual) if args.qual is not None else ""
        cmdline += '--qual_cutoff_phaseable_region {} '.format(
            args.qual_cutoff_phaseable_region) if args.qual_cutoff_phaseable_region is not None else ""
        cmdline += '--qual_cutoff_unphaseable_region {} '.format(
            args.qual_cutoff_unphaseable_region) if args.qual_cutoff_unphaseable_region is not None else ""
        cmdline += '--snv_min_af {} '.format(args.snv_min_af) if args.snv_min_af is not None else ""
        cmdline += '--indel_min_af {} '.format(args.indel_min_af) if args.indel_min_af is not None else ""
        cmdline += '--min_coverage {} '.format(args.min_coverage) if args.min_coverage is not None else ""
        cmdline += '--min_bq {} '.format(args.min_bq) if args.min_bq is not None else ""
        cmdline += ' --max_depth {} '.format(args.bam_mplp_set_maxcnt) if args.bam_mplp_set_maxcnt is not None else ""
        cmdline += '--chunk_size {} '.format(args.chunk_size) if args.chunk_size is not None else ""
        cmdline += '--dry_run ' if args.dry_run else ""
        cmdline += '--remove_intermediate_dir ' if args.remove_intermediate_dir else ""
        cmdline += '--panel_of_normals {} '.format(args.panel_of_normals) if args.panel_of_normals is not None else ""
        cmdline += '--panel_of_normals_require_allele_matching {} '.format(
            args.panel_of_normals_require_allele_matching) if args.panel_of_normals_require_allele_matching is not None else ""
        cmdline += '--snv_pileup_affirmative_model_path {} '.format(
            args.snv_pileup_affirmative_model_path) if args.snv_pileup_affirmative_model_path is not None else ""
        cmdline += '--snv_pileup_negational_model_path {} '.format(
            args.snv_pileup_negational_model_path) if args.snv_pileup_negational_model_path is not None else ""
        cmdline += '--indel_pileup_affirmative_model_path {} '.format(
            args.indel_pileup_affirmative_model_path) if args.indel_pileup_affirmative_model_path is not None else ""
        cmdline += '--indel_pileup_negational_model_path {} '.format(
            args.indel_pileup_negational_model_path) if args.indel_pileup_negational_model_path is not None else ""
        cmdline += '--python {} '.format(args.python) if args.python != "python3" else ""
        cmdline += '--pypy {} '.format(args.pypy) if args.pypy != "pypy3" else ""
        cmdline += '--samtools {} '.format(args.samtools) if args.samtools != "samtools" else ""
        cmdline += '--parallel {} '.format(args.parallel) if args.parallel != "parallel" else ""
        cmdline += '--longphase {} '.format(args.longphase) if args.longphase is not None else ""
        cmdline += '--whatshap {} '.format(args.whatshap) if args.whatshap is not None else ""
        cmdline += '--use_longphase_for_intermediate_phasing {} '.format(
            args.use_longphase_for_intermediate_phasing) if args.use_longphase_for_intermediate_phasing is not None else ""
        cmdline += '--use_whatshap_for_intermediate_phasing {} '.format(
            args.use_whatshap_for_intermediate_phasing) if args.use_whatshap_for_intermediate_phasing is not None else ""
        cmdline += '--use_longphase_for_intermediate_haplotagging {} '.format(
            args.use_longphase_for_intermediate_haplotagging) if args.use_longphase_for_intermediate_haplotagging is not None else ""
        cmdline += '--use_gpu ' if args.use_gpu else ""
        cmdline += '--skip_steps {} '.format(args.skip_steps) if args.skip_steps is not None else ""
        cmdline += '--conda_prefix {} '.format(args.conda_prefix) if args.conda_prefix is not None else ""
        cmdline += '--disable_intermediate_phasing ' if args.disable_intermediate_phasing else ""
        cmdline += '--disable_indel_calling ' if args.disable_indel_calling else ""
        cmdline += '--print_ref_calls ' if args.print_ref_calls else ""
        cmdline += '--enable_realignment False ' if args.enable_realignment is False else ""
        cmdline += '--enable_postfilter False ' if args.enable_postfilter is False else ""
        cmdline += '--apply_haplotype_filtering False ' if args.apply_haplotype_filtering is False else ""
        cmdline += '--disable_verdict ' if args.disable_verdict else ""
        cmdline += '--disable_nonsomatic_tagging ' if args.disable_nonsomatic_tagging else ""
        cmdline += '--do_not_print_nonsomatic_calls ' if args.do_not_print_nonsomatic_calls else ""
        args.cmdline = cmdline
    except:
        return args
    args.cmdline = cmdline
    logging("[COMMAND] " + cmdline + '\n')
    return args


def somatic_calling(args):
    step = 1
    echo_list = []
    commands_list = []
    phasing_output_path = args.output_dir + '/tmp/phasing_output'
    tumor_bam_prefix = phasing_output_path + '/phased_bam_output/tumor_' if args.phase_tumor else args.tumor_bam_fn

    try:
        rc = subprocess.check_call('time', shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time = 'time '
    except subprocess.CalledProcessError as e:
        time = ''

    # Somatic Calling
    # STEP 1: EXTRACT CANDIDATES
    echo_list.append("[INFO] STEP 1: Extract Variant Candidates from Tumor BAM")
    step += 1
    ec_command = '( ' + time + args.parallel
    ec_command += ' --joblog ' + args.output_dir + '/logs/parallel_1_extract_tumor_candidates.log'
    ec_command += ' -C " " -j ' + str(args.threads)
    ec_command += ' ' + args.pypy + ' ' + main_entry + ' extract_candidates_calling'
    ec_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
    ec_command += ' --ref_fn ' + args.ref_fn
    ec_command += ' --samtools ' + args.samtools
    ec_command += ' --snv_min_af ' + str(args.snv_min_af)
    ec_command += ' --indel_min_af ' + str(args.indel_min_af)
    ec_command += ' --chunk_id {2} '
    ec_command += ' --chunk_num {3} '
    ec_command += ' --ctg_name {1} '
    ec_command += ' --platform ' + args.platform
    ec_command += ' --min_coverage ' + str(args.min_coverage)
    ec_command += ' --min_bq ' + str(args.min_bq)
    ec_command += ' --bed_fn_source ' + str(args.bed_fn)
    ec_command += ' --bed_fn ' + os.path.join(args.output_dir, 'tmp', 'split_beds', '{1}')
    if not args.disable_indel_calling:
        ec_command += ' --call_indels_only_in_these_regions ' + os.path.join(args.output_dir, 'tmp', 'split_indel_beds',
                                                                             '{1}')
        ec_command += ' --select_indel_candidates True'
    ec_command += ' --candidates_folder ' + args.output_dir + '/tmp/candidates'
    ec_command += ' --output_depth True '
    ec_command += ' --genotyping_mode_vcf_fn ' + str(args.genotyping_mode_vcf_fn)
    ec_command += ' --hybrid_mode_vcf_fn ' + str(args.hybrid_mode_vcf_fn)
    ec_command += ' :::: ' + os.path.join(args.output_dir, 'tmp', 'CHUNK_LIST')
    ec_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/1_EC.log'
    ec_command += ' && ' + args.pypy + ' ' + main_entry + ' concat_files'
    ec_command += ' --input_dir ' + "{}/tmp/candidates".format(args.output_dir)
    ec_command += ' --input_prefix ' + "SNV_CANDIDATES_FILE_"
    ec_command += ' --output_fn SNV_CANDIDATES_FILES'
    commands_list.append(ec_command)

    ## STEP 2: SNV PILEUP MODEL CALLING
    ## CREATE SNV PILEUP TENSOR
    echo_list.append("[INFO] STEP 2: SNV Pileup Model Calling\n")
    echo_list[-1] += ("[INFO] Create Tensors for SNV Pileup Affirmative Model")
    cpt_aff_command = '( ' + time + args.parallel
    cpt_aff_command += ' --joblog ' + args.output_dir + '/logs/parallel_2-1_create_tensor_affirmative_snv.log'
    cpt_aff_command += ' -j ' + str(args.threads)
    cpt_aff_command += ' ' + args.pypy + ' ' + main_entry + ' create_tensor_pileup_calling'
    cpt_aff_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
    cpt_aff_command += ' --ref_fn ' + args.ref_fn
    cpt_aff_command += ' --ctg_name {1/.}'
    cpt_aff_command += ' --min_bq ' + str(args.min_bq)
    cpt_aff_command += ' --max_depth {} '.format(str(args.bam_mplp_set_maxcnt)) if args.bam_mplp_set_maxcnt is not None else ""
    cpt_aff_command += ' --samtools ' + args.samtools
    cpt_aff_command += ' --candidates_bed_regions {1}'
    cpt_aff_command += ' --tensor_can_fn ' + args.output_dir + '/tmp/pileup_tensor_can_affirmative/{1/} '
    cpt_aff_command += ' --platform ' + args.platform
    cpt_aff_command += ' :::: ' + args.output_dir + '/tmp/candidates/SNV_CANDIDATES_FILES'
    cpt_aff_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/2-1_CPT_Affirmative_SNV.log'
    commands_list += [cpt_aff_command]

    if args.platform == 'ilmn':
        echo_list.append("[INFO] Create Tensors for SNV Pileup Negational Model")
        cpt_neg_command = "ln -sf {} {}".format(args.output_dir + '/tmp/pileup_tensor_can_affirmative/*_snv',
                                                args.output_dir + '/tmp/pileup_tensor_can_negational/')
        commands_list += [cpt_neg_command]
    else:
        echo_list.append("[INFO] Create Tensors for SNV Pileup Negational Model")
        cpt_neg_command = '( ' + time + args.parallel
        cpt_neg_command += ' --joblog ' + args.output_dir + '/logs/parallel_2-1_create_tensor_negational_snv.log'
        cpt_neg_command += ' -j ' + str(args.threads)
        cpt_neg_command += ' ' + args.pypy + ' ' + main_entry + ' create_tensor_pileup_calling'
        cpt_neg_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
        cpt_neg_command += ' --ref_fn ' + args.ref_fn
        cpt_neg_command += ' --ctg_name {1/.}'
        cpt_neg_command += ' --samtools ' + args.samtools
        cpt_neg_command += ' --candidates_bed_regions {1}'
        cpt_neg_command += ' --min_bq 0'
        cpt_neg_command += ' --max_depth {} '.format(str(args.bam_mplp_set_maxcnt)) if args.bam_mplp_set_maxcnt is not None else ""
        cpt_neg_command += ' --tensor_can_fn ' + args.output_dir + '/tmp/pileup_tensor_can_negational/{1/} '
        cpt_neg_command += ' --platform ' + args.platform
        cpt_neg_command += ' :::: ' + args.output_dir + '/tmp/candidates/SNV_CANDIDATES_FILES'
        cpt_neg_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/2-1_CPT_Negational_SNV.log'
        commands_list += [cpt_neg_command]

    ## PREDICT SNV
    echo_list.append("[INFO] SNV Pileup Model Prediction along with Affirmative & Negational Model")
    p_predict_command = '( ' + time + args.parallel
    p_predict_command += ' --joblog ' + args.output_dir + '/logs/parallel_2-2_predict_snv.log'
    p_predict_command += ' -j ' + str(args.threads)
    p_predict_command += ' ' + args.python + ' ' + main_entry + ' predict'
    p_predict_command += ' --tensor_fn_acgt ' + args.output_dir + '/tmp/pileup_tensor_can_affirmative/{1/} '
    p_predict_command += ' --tensor_fn_nacgt ' + args.output_dir + '/tmp/pileup_tensor_can_negational/{1/} '
    p_predict_command += ' --predict_fn ' + args.output_dir + '/tmp/predict/{1/} '
    p_predict_command += ' --chkpnt_fn_acgt ' + args.snv_pileup_affirmative_model_path
    p_predict_command += ' --chkpnt_fn_nacgt ' + args.snv_pileup_negational_model_path
    p_predict_command += ' --use_gpu ' + str(args.use_gpu)
    p_predict_command += ' --platform ' + args.platform
    p_predict_command += ' --ctg_name {1/.}'
    p_predict_command += ' --pileup '
    p_predict_command += ' --show_ref ' if args.print_ref_calls else ""
    p_predict_command += ' --disable_indel_calling True'
    p_predict_command += ' :::: ' + args.output_dir + '/tmp/candidates/SNV_CANDIDATES_FILES'
    p_predict_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/2-2_PREDICT_SNV.log'
    commands_list += [p_predict_command]

    # CALL SNV VARIANTS
    echo_list.append("[INFO] SNV Pileup Model Calling Variants")
    cv_command = '( ' + time + args.parallel
    cv_command += ' --joblog ' + args.output_dir + '/logs/parallel_2-3_call_variants_snv.log'
    cv_command += ' -j ' + str(args.threads)
    cv_command += ' ' + args.python + ' ' + main_entry + ' call_variants'
    cv_command += ' --predict_fn ' + args.output_dir + '/tmp/predict/{1/} '
    cv_command += ' --call_fn ' + args.output_dir + '/tmp/vcf_output/p_{1/}.vcf'
    cv_command += ' --ref_fn ' + args.ref_fn
    cv_command += ' --platform ' + args.platform
    cv_command += ' --likelihood_matrix_data {} '.format(
        args.snv_likelihood_matrix_data) if args.snv_likelihood_matrix_data is not None else ''
    cv_command += ' --show_ref ' if args.print_ref_calls else ""
    cv_command += ' --disable_indel_calling True'
    cv_command += ' :::: ' + args.output_dir + '/tmp/candidates/SNV_CANDIDATES_FILES'
    cv_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/2-3_CALL_VARIANTS_SNV.log'
    commands_list += [cv_command]

    # MERGE CALLING SNV VCFs
    echo_list.append("[INFO] Merge SNV VCFs")
    p_mv_command = args.pypy + ' ' + main_entry + ' sort_vcf'
    p_mv_command += ' --ref_fn ' + args.ref_fn
    p_mv_command += ' --contigs_fn ' + os.path.join(args.output_dir, 'tmp', 'CONTIGS')
    p_mv_command += ' --input_dir ' + args.output_dir + '/tmp/vcf_output'
    p_mv_command += ' --vcf_fn_suffix ' + 'snv.vcf'
    p_mv_command += ' --output_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup.vcf'
    commands_list += [p_mv_command]

    if not args.disable_nonsomatic_tagging:
        # STEP 3: SNV NON-SOMATIC TAGGING
        echo_list.append("[INFO] STEP 3: Non-somatic Tagging for SNV Variants")
        gf_command = '( ' + time + args.parallel
        gf_command += ' --joblog ' + args.output_dir + '/logs/parallel_3_nonsomatic_tagging_snv.log'
        gf_command += ' -j ' + str(args.threads)
        gf_command += ' ' + args.pypy + ' ' + main_entry + ' nonsomatic_tagging'
        gf_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup.vcf'
        gf_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_nonsomatic_tagging_{1}.vcf'
        gf_command += ' --ctg_name {1} '
        gf_command += ' --pypy3 ' + args.pypy
        gf_command += ' --parallel ' + args.parallel
        gf_command += ' --show_ref ' if args.print_ref_calls else ''
        gf_command += ' --do_not_print_nonsomatic_calls ' if args.do_not_print_nonsomatic_calls else ''
        gf_command += ' --panel_of_normals {} '.format(
            args.panel_of_normals) if args.panel_of_normals is not None else ''
        gf_command += ' --panel_of_normals_require_allele_matching {} '.format(
            args.panel_of_normals_require_allele_matching) if args.panel_of_normals_require_allele_matching is not None else ''
        gf_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
        gf_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/3_NONSOMATIC_TAG_SNV.log'
        commands_list += [gf_command]

        # MERGE SNV NON-SOMATIC TAGGING VCFs
        echo_list.append("[INFO] Merge SNV Non-somatic Tagging VCFs")
        p_mv_command = args.pypy + ' ' + main_entry + ' sort_vcf'
        p_mv_command += ' --ref_fn ' + args.ref_fn
        p_mv_command += ' --contigs_fn ' + os.path.join(args.output_dir, 'tmp', 'CONTIGS')
        p_mv_command += ' --input_dir ' + args.output_dir + '/tmp/vcf_output'
        p_mv_command += ' --vcf_fn_prefix ' + 'snv_nonsomatic_tagging_'
        p_mv_command += ' --output_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_nonsomatic_tagging.vcf'
        commands_list += [p_mv_command]
    else:
        # STEP 3: SNV NON-SOMATIC TAGGING
        echo_list.append("[INFO] STEP 3: Non-somatic Tagging for SNV Variants")
        nst_command = "ln -sf {} {}".format(args.output_dir + '/tmp/vcf_output/snv_pileup.vcf',
                                            args.output_dir + '/tmp/vcf_output/snv_pileup_nonsomatic_tagging.vcf')
        commands_list += [nst_command]

    if args.platform != 'ilmn' and args.phase_tumor:
        echo_list.append("[INFO] Select Heterozygous SNP for Phasing")
        ssp_command = '( ' + time + args.parallel
        ssp_command += ' --joblog ' + args.output_dir + '/logs/phasing_log/parallel_1_select_hetero_snp_for_phasing.log'
        ssp_command += ' -j ' + str(args.threads)
        ssp_command += ' ' + args.pypy + ' ' + main_entry + ' select_hetero_snp_for_phasing'
        ssp_command += ' --tumor_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup.vcf'
        ssp_command += ' --output_folder ' + phasing_output_path + '/vcf'
        ssp_command += ' --ctg_name {1}'
        ssp_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
        ssp_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/phasing_log/1_select_hetero_snp_for_phasing.log'
        commands_list.append(ssp_command)

        echo_list.append("[INFO] Phase the Tumor BAM")
        if args.use_longphase_for_intermediate_phasing is not None:
            pt_command = '( ' + time + args.parallel
            pt_command += ' --joblog ' + args.output_dir + '/logs/phasing_log/parallel_2_phase_tumor.log'
            pt_command += ' -j ' + str(args.threads)
            pt_command += ' ' + args.longphase + ' phase '
            pt_command += ' -s ' + phasing_output_path + '/vcf/{1}.vcf'
            pt_command += ' -b ' + args.tumor_bam_fn
            pt_command += ' -r ' + args.ref_fn
            pt_command += ' -t ' + str(args.threads)
            pt_command += ' -o ' + phasing_output_path + '/phased_vcf_output/tumor_phased_{1}'
            pt_command += ' --ont' if args.platform == 'ont' else ' --pb'
            pt_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
            pt_command += ' && ' + args.parallel
            pt_command += ' -j ' + str(args.threads)
            pt_command += ' bgzip -f ' + phasing_output_path + '/phased_vcf_output/tumor_phased_{1}.vcf'
            pt_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
            pt_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/phasing_log/2_phase_tumor.log'
        else:
            pt_command = '( ' + time + args.parallel
            pt_command += ' --joblog ' + args.output_dir + '/logs/phasing_log/parallel_2_phase_tumor.log'
            pt_command += ' -j ' + str(args.threads)
            pt_command += ' ' + args.whatshap + ' phase '
            pt_command += ' --output ' + phasing_output_path + '/phased_vcf_output/tumor_phased_{1}.vcf.gz'
            pt_command += ' --reference ' + args.ref_fn
            pt_command += ' --chromosome {1}'
            pt_command += ' --distrust-genotypes'
            pt_command += ' --ignore-read-groups'
            pt_command += ' ' + phasing_output_path + '/vcf/{1}.vcf'
            pt_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
            pt_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/phasing_log/2_phase_tumor.log'

        tabix_command = args.parallel + ' -j ' + str(args.threads)
        tabix_command += ' tabix' + ' -f -p vcf'
        tabix_command += ' ' + phasing_output_path + '/phased_vcf_output/tumor_phased_{1}.vcf.gz'
        tabix_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
        commands_list.append(pt_command + ' && ' + tabix_command)

        echo_list.append("[INFO] Haplotag the Tumor BAM")
        if args.use_longphase_for_intermediate_haplotagging is not None:
            ht_command = '( ' + time + args.parallel
            ht_command += ' --joblog ' + args.output_dir + '/logs/phasing_log/parallel_3_haplotag_tumor.log'
            ht_command += ' -j ' + str(args.threads)
            ht_command += ' ' + args.longphase + ' haplotag'
            ht_command += ' -o ' + phasing_output_path + '/phased_bam_output/tumor_{1}'
            ht_command += ' --reference ' + args.ref_fn
            ht_command += ' --region {1} '
            ht_command += ' -s ' + phasing_output_path + '/phased_vcf_output/tumor_phased_{1}.vcf.gz'
            ht_command += ' -b ' + args.tumor_bam_fn
            ht_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
            ht_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/phasing_log/3_tumor_haplotag.log'
        else:
            ht_command = '( ' + time + args.parallel
            ht_command += ' --joblog ' + args.output_dir + '/logs/phasing_log/parallel_3_haplotag_tumor.log'
            ht_command += ' -j ' + str(args.threads)
            ht_command += ' ' + args.whatshap + ' haplotag'
            ht_command += ' --output ' + phasing_output_path + '/phased_bam_output/tumor_{1}.bam'
            ht_command += ' --reference ' + args.ref_fn
            ht_command += ' --regions {1} '
            ht_command += ' --ignore-read-groups'
            ht_command += ' ' + phasing_output_path + '/phased_vcf_output/tumor_phased_{1}.vcf.gz'
            ht_command += ' ' + args.tumor_bam_fn
            ht_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
            ht_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/phasing_log/3_tumor_haplotag.log'

        index_command = args.parallel + ' -j ' + str(args.threads)
        index_command += ' ' + args.samtools + ' index '
        index_command += ' -@' + str(args.threads)
        index_command += ' ' + phasing_output_path + '/phased_bam_output/tumor_{1}.bam'
        index_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
        commands_list.append(ht_command + ' && ' + index_command)

    if args.platform == 'ilmn':
        # STEP 4: SHORT-READ REALIGNMENT for SNV Variants
        echo_list.append("[INFO] STEP 4: Short-read Realignment for SNV Variants")
        realign_command = '( ' + time + args.python + ' ' + main_entry + ' realign_variants'
        realign_command += ' --bam_fn ' + args.tumor_bam_fn
        realign_command += ' --ref_fn ' + args.ref_fn
        realign_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_nonsomatic_tagging.vcf'
        realign_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_filtering.vcf'
        realign_command += ' --samtools ' + args.samtools
        realign_command += ' --python ' + args.python
        realign_command += ' --threads ' + str(args.threads)
        realign_command += ' --show_ref ' if args.print_ref_calls else ''
        realign_command += ' --enable_realignment ' + str(args.enable_realignment)
        realign_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/4-1_REALIGN_SNV.log'

        postfilter_command = '( ' + time + args.pypy + ' ' + main_entry + ' postfilter_variants'
        postfilter_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
        postfilter_command += ' --ref_fn ' + args.ref_fn
        postfilter_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_filtering.vcf'
        postfilter_command += ' --output_dir ' + args.output_dir + '/tmp/vcf_output'
        postfilter_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_filtering.vcf'
        postfilter_command += ' --samtools ' + args.samtools
        postfilter_command += ' --pypy3 ' + args.pypy
        postfilter_command += ' --parallel ' + args.parallel
        postfilter_command += ' --threads ' + str(args.threads)
        postfilter_command += ' --debug ' if args.debug else ''
        postfilter_command += ' --show_ref ' if args.print_ref_calls else ''
        postfilter_command += ' --enable_postfilter ' + str(args.enable_postfilter)
        postfilter_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/4-2_POSTFILTER_SNV.log'

        commands_list += [realign_command + ' && ' + postfilter_command]
    else:
        # STEP 4: HAPLOTYPE FILTERING for SNV Variants
        echo_list.append("[INFO] STEP 4: Haplotype Filtering for SNV Variants")
        hap_g_command = '( ' + time + args.pypy + ' ' + main_entry + ' haplotype_filtering'
        hap_g_command += ' --tumor_bam_fn ' + tumor_bam_prefix
        hap_g_command += ' --ref_fn ' + args.ref_fn
        hap_g_command += ' --germline_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup.vcf'
        hap_g_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_nonsomatic_tagging.vcf'
        hap_g_command += ' --output_dir ' + args.output_dir + '/tmp/vcf_output'
        hap_g_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_filtering.vcf'
        hap_g_command += ' --samtools ' + args.samtools
        hap_g_command += ' --pypy3 ' + args.pypy
        hap_g_command += ' --parallel ' + args.parallel
        hap_g_command += ' --threads ' + str(args.threads)
        hap_g_command += ' --debug ' if args.debug else ''
        hap_g_command += ' --show_ref ' if args.print_ref_calls else ''
        hap_g_command += ' --apply_haplotype_filtering ' + str(args.apply_haplotype_filtering)
        hap_g_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/4_HAP_FILTER_SNV.log'
        commands_list += [hap_g_command]

    # STEP 5: SNV VCF POST-PROCESSING
    echo_list.append("[INFO] STEP 5: SNV VCF Post-processing")
    postprocess_vcf_command = '( ' + time + args.pypy + ' ' + main_entry + ' postprocess_vcf'
    postprocess_vcf_command += ' --ref_fn ' + args.ref_fn
    postprocess_vcf_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup_filtering.vcf'
    postprocess_vcf_command += ' --output_fn ' + args.output_dir + '/{}.vcf'.format(args.snv_output_prefix)
    postprocess_vcf_command += ' --platform ' + args.platform
    postprocess_vcf_command += ' --qual ' + str(args.qual)
    postprocess_vcf_command += ' --qual_cutoff_phaseable_region ' + str(args.qual_cutoff_phaseable_region)
    postprocess_vcf_command += ' --qual_cutoff_unphaseable_region ' + str(args.qual_cutoff_unphaseable_region)
    postprocess_vcf_command += ' --sample_name ' + str(args.sample_name)
    postprocess_vcf_command += ' --disable_indel_calling True'
    postprocess_vcf_command += ' --cmdline ' + args.output_dir + '/tmp/CMD'
    postprocess_vcf_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/5_PV_SNV.log'
    commands_list += [postprocess_vcf_command]

    # ADD REFERENCE CALLs for SNV Calling
    if args.genotyping_mode_vcf_fn is not None or args.hybrid_mode_vcf_fn is not None:
        echo_list.append("[INFO] Add Reference Calls to the VCF Output for SNV Calling")
        genotyping_command = args.pypy + ' ' + main_entry + ' add_back_missing_variants_in_genotyping'
        genotyping_command += ' --genotyping_mode_vcf_fn ' + str(args.genotyping_mode_vcf_fn)
        genotyping_command += ' --hybrid_mode_vcf_fn ' + str(args.hybrid_mode_vcf_fn)
        genotyping_command += ' --call_fn ' + args.output_dir + '/{}.vcf.gz'.format(args.snv_output_prefix)
        genotyping_command += ' --output_fn ' + args.output_dir + '/{}.vcf'.format(args.snv_output_prefix)
        genotyping_command += ' --candidates_folder ' + args.output_dir + '/tmp/candidates'
        genotyping_command += ' 2>&1 | tee ' + args.output_dir + '/logs/6_GT.log'
        commands_list += [genotyping_command]

    if not args.disable_verdict:
        echo_list.append("[INFO] Add CNA Germline Tagging to the VCF Output for SNV Calling")
        cna_germline_tagging_command = args.python + ' ' + main_entry + ' cna_germline_tagging'
        cna_germline_tagging_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
        cna_germline_tagging_command += ' --input_vcf_fn ' + args.output_dir + '/{}.vcf.gz'.format(
            args.snv_output_prefix)
        cna_germline_tagging_command += ' --allele_counter ' + str(args.allele_counter_dir)
        cna_germline_tagging_command += ' --cna_resource_dir ' + str(args.cna_resource_dir)
        cna_germline_tagging_command += ' --output_fn ' + args.output_dir + '/{}.vcf'.format(
            args.snv_output_prefix)
        cna_germline_tagging_command += ' --output_dir ' + args.output_dir + '/tmp/cna_output'
        cna_germline_tagging_command += ' --parallel ' + args.parallel
        cna_germline_tagging_command += ' --python ' + args.python
        cna_germline_tagging_command += ' --contig_fn ' + args.output_dir + '/tmp/CONTIGS'
        cna_germline_tagging_command += ' --threads ' + str(args.threads)
        cna_germline_tagging_command += ' --platform ' + args.platform
        cna_germline_tagging_command += ' 2>&1 | tee ' + args.output_dir + '/logs/6_CGT.log'
        commands_list += [cna_germline_tagging_command]

    if not args.disable_indel_calling:
        # STEP 6: CREATE INDEL PILEUP TENSOR
        echo_list.append("[INFO] STEP 6: Indel Pileup Model Calling\n")
        echo_list[-1] += ("[INFO] Create Tensors for Indel Pileup Affirmative Model")
        indel_cpt_aff_command = args.pypy + ' ' + main_entry + ' concat_files'
        indel_cpt_aff_command += ' --input_dir ' + "{}/tmp/candidates".format(args.output_dir)
        indel_cpt_aff_command += ' --input_prefix ' + "INDEL_CANDIDATES_FILE_"
        indel_cpt_aff_command += ' --output_fn INDEL_CANDIDATES_FILES '
        indel_cpt_aff_command += ' && ( ' + time + args.parallel
        indel_cpt_aff_command += ' --joblog ' + args.output_dir + '/logs/parallel_6-1_create_tensor_affirmative_indel.log'
        indel_cpt_aff_command += ' -j ' + str(args.threads)
        indel_cpt_aff_command += ' ' + args.pypy + ' ' + main_entry + ' create_tensor_pileup_calling'
        indel_cpt_aff_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
        indel_cpt_aff_command += ' --ref_fn ' + args.ref_fn
        indel_cpt_aff_command += ' --ctg_name {1/.}'
        indel_cpt_aff_command += ' --min_bq ' + str(args.min_bq)
        indel_cpt_aff_command += ' --max_depth {} '.format(str(args.bam_mplp_set_maxcnt)) if args.bam_mplp_set_maxcnt is not None else ""
        indel_cpt_aff_command += ' --samtools ' + args.samtools
        indel_cpt_aff_command += ' --candidates_bed_regions {1}'
        indel_cpt_aff_command += ' --tensor_can_fn ' + args.output_dir + '/tmp/pileup_tensor_can_affirmative/{1/} '
        indel_cpt_aff_command += ' --platform ' + args.platform
        indel_cpt_aff_command += ' :::: ' + args.output_dir + '/tmp/candidates/INDEL_CANDIDATES_FILES'
        indel_cpt_aff_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/6-1_CPT_Affirmative_INDEL.log'
        commands_list += [indel_cpt_aff_command]

        if args.platform == 'ilmn':
            echo_list.append("[INFO] Create Tensors for Indel Pileup Negational Model")
            indel_cpt_neg_command = "ln -sf {} {}".format(
                args.output_dir + '/tmp/pileup_tensor_can_affirmative/*_indel',
                args.output_dir + '/tmp/pileup_tensor_can_negational/')
            commands_list += [indel_cpt_neg_command]
        else:
            echo_list.append("[INFO] Create Tensors for Indel Pileup Negational Model")
            indel_cpt_neg_command = '( ' + time + args.parallel
            indel_cpt_neg_command += ' --joblog ' + args.output_dir + '/logs/parallel_6-1_create_tensor_negational_indel.log'
            indel_cpt_neg_command += ' -j ' + str(args.threads)
            indel_cpt_neg_command += ' ' + args.pypy + ' ' + main_entry + ' create_tensor_pileup_calling'
            indel_cpt_neg_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
            indel_cpt_neg_command += ' --ref_fn ' + args.ref_fn
            indel_cpt_neg_command += ' --ctg_name {1/.}'
            indel_cpt_neg_command += ' --samtools ' + args.samtools
            indel_cpt_neg_command += ' --candidates_bed_regions {1}'
            indel_cpt_neg_command += ' --min_bq 0'
            indel_cpt_neg_command += ' --max_depth {} '.format(str(args.bam_mplp_set_maxcnt)) if args.bam_mplp_set_maxcnt is not None else ""
            indel_cpt_neg_command += ' --tensor_can_fn ' + args.output_dir + '/tmp/pileup_tensor_can_negational/{1/} '
            indel_cpt_neg_command += ' --platform ' + args.platform
            indel_cpt_neg_command += ' :::: ' + args.output_dir + '/tmp/candidates/INDEL_CANDIDATES_FILES'
            indel_cpt_neg_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/6-1_CPT_Negational_INDEL.log'
            commands_list += [indel_cpt_neg_command]

        ## PREDICT INDEL
        echo_list.append("[INFO] Indel Pileup Model Prediction along with Affirmative & Negational Model")
        indel_p_predict_command = '( ' + time + args.parallel
        indel_p_predict_command += ' --joblog ' + args.output_dir + '/logs/parallel_6-2_predict_indel.log'
        indel_p_predict_command += ' -j ' + str(args.threads)
        indel_p_predict_command += ' ' + args.python + ' ' + main_entry + ' predict'
        indel_p_predict_command += ' --tensor_fn_acgt ' + args.output_dir + '/tmp/pileup_tensor_can_affirmative/{1/} '
        indel_p_predict_command += ' --tensor_fn_nacgt ' + args.output_dir + '/tmp/pileup_tensor_can_negational/{1/} '
        indel_p_predict_command += ' --predict_fn ' + args.output_dir + '/tmp/predict/{1/} '
        indel_p_predict_command += ' --chkpnt_fn_acgt ' + args.indel_pileup_affirmative_model_path
        indel_p_predict_command += ' --chkpnt_fn_nacgt ' + args.indel_pileup_negational_model_path
        indel_p_predict_command += ' --use_gpu ' + str(args.use_gpu)
        indel_p_predict_command += ' --platform ' + args.platform
        indel_p_predict_command += ' --ctg_name {1/.}'
        indel_p_predict_command += ' --pileup '
        indel_p_predict_command += ' --disable_indel_calling False '
        indel_p_predict_command += ' --show_ref ' if args.print_ref_calls else ""
        indel_p_predict_command += ' :::: ' + args.output_dir + '/tmp/candidates/INDEL_CANDIDATES_FILES'
        indel_p_predict_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/6-2_PREDICT_INDEL.log'
        commands_list += [indel_p_predict_command]

        # INDEL CALL VARIANTS
        echo_list.append("[INFO] Indel Pileup Model Calling Variants")
        indel_cv_command = '( ' + time + args.parallel
        indel_cv_command += ' --joblog ' + args.output_dir + '/logs/parallel_6-3_call_variants_indel.log'
        indel_cv_command += ' -j ' + str(args.threads)
        indel_cv_command += ' ' + args.python + ' ' + main_entry + ' call_variants'
        indel_cv_command += ' --predict_fn ' + args.output_dir + '/tmp/predict/{1/} '
        indel_cv_command += ' --call_fn ' + args.output_dir + '/tmp/vcf_output/p_{1/}.vcf'
        indel_cv_command += ' --platform ' + args.platform
        indel_cv_command += ' --likelihood_matrix_data {} '.format(
            args.indel_likelihood_matrix_data) if args.indel_likelihood_matrix_data is not None else ''
        indel_cv_command += ' --disable_indel_calling False '
        indel_cv_command += ' --show_ref ' if args.print_ref_calls else ""
        indel_cv_command += ' :::: ' + args.output_dir + '/tmp/candidates/INDEL_CANDIDATES_FILES'
        indel_cv_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/6-3_CALL_VARIANTS_INDEL.log'
        commands_list += [indel_cv_command]

        # MERGE INDEL CALLING VCFs
        echo_list.append("[INFO] Merge Indel VCFs")
        indel_p_mv_command = args.pypy + ' ' + main_entry + ' sort_vcf'
        indel_p_mv_command += ' --ref_fn ' + args.ref_fn
        indel_p_mv_command += ' --contigs_fn ' + os.path.join(args.output_dir, 'tmp', 'CONTIGS')
        indel_p_mv_command += ' --input_dir ' + args.output_dir + '/tmp/vcf_output'
        indel_p_mv_command += ' --vcf_fn_suffix ' + 'indel.vcf'
        indel_p_mv_command += ' --output_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup.vcf'
        commands_list += [indel_p_mv_command]

        if not args.disable_nonsomatic_tagging:
            # INDEL NON-SOMATIC TAGGING
            echo_list.append("[INFO] STEP 7: Non-somatic Tagging for Indel Variants")
            indel_gf_command = '( ' + time + args.parallel
            indel_gf_command += ' --joblog ' + args.output_dir + '/logs/parallel_7_nonsomatic_tagging_indel.log'
            indel_gf_command += ' -j ' + str(args.threads)
            indel_gf_command += ' ' + args.pypy + ' ' + main_entry + ' nonsomatic_tagging'
            indel_gf_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup.vcf'
            indel_gf_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_nonsomatic_tagging_{1}.vcf'
            indel_gf_command += ' --ctg_name {1} '
            indel_gf_command += ' --pypy3 ' + args.pypy
            indel_gf_command += ' --parallel ' + args.parallel
            indel_gf_command += ' --show_ref ' if args.print_ref_calls else ''
            indel_gf_command += ' --do_not_print_nonsomatic_calls ' if args.do_not_print_nonsomatic_calls else ''
            indel_gf_command += ' --panel_of_normals {} '.format(
                args.panel_of_normals) if args.panel_of_normals is not None else ''
            indel_gf_command += ' --panel_of_normals_require_allele_matching {} '.format(
                args.panel_of_normals_require_allele_matching) if args.panel_of_normals_require_allele_matching is not None else ''
            indel_gf_command += ' :::: ' + args.output_dir + '/tmp/CONTIGS'
            indel_gf_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/7_NONSOMATIC_TAG_INDEL.log'
            commands_list += [indel_gf_command]

            # MERGE INDEL NON-SOMATIC TAGGING VCFs
            echo_list.append("[INFO] Merge Indel Non-somatic Tagging VCFs")
            indel_p_mv_command = args.pypy + ' ' + main_entry + ' sort_vcf'
            indel_p_mv_command += ' --ref_fn ' + args.ref_fn
            indel_p_mv_command += ' --contigs_fn ' + os.path.join(args.output_dir, 'tmp', 'CONTIGS')
            indel_p_mv_command += ' --input_dir ' + args.output_dir + '/tmp/vcf_output'
            indel_p_mv_command += ' --vcf_fn_prefix ' + 'indel_nonsomatic_tagging_'
            indel_p_mv_command += ' --output_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_nonsomatic_tagging.vcf'
            commands_list += [indel_p_mv_command]
        else:
            # INDEL NON-SOMATIC TAGGING
            echo_list.append("[INFO] STEP 7: Non-somatic Tagging for SNV Variants")
            indel_nst_command = "ln -sf {} {}".format(args.output_dir + '/tmp/vcf_output/indel_pileup.vcf',
                                                      args.output_dir + '/tmp/vcf_output/indel_pileup_nonsomatic_tagging.vcf')
            commands_list += [indel_nst_command]

        if args.platform == 'ilmn':
            # SHORT-READ REALIGNMENT for Indel Variants
            echo_list.append("[INFO] STEP 8: Short-read Realignment for Indel Variants")
            indel_realign_command = '( ' + time + args.python + ' ' + main_entry + ' realign_variants'
            indel_realign_command += ' --bam_fn ' + args.tumor_bam_fn
            indel_realign_command += ' --ref_fn ' + args.ref_fn
            indel_realign_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_nonsomatic_tagging.vcf'
            indel_realign_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_filtering.vcf'
            indel_realign_command += ' --samtools ' + args.samtools
            indel_realign_command += ' --python ' + args.python
            indel_realign_command += ' --threads ' + str(args.threads)
            indel_realign_command += ' --show_ref ' if args.print_ref_calls else ''
            indel_realign_command += ' --is_indel '
            indel_realign_command += ' --enable_realignment ' + str(args.enable_realignment)
            indel_realign_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/8-1_REALIGN_INDEL.log'

            indel_postfilter_command = '( ' + time + args.pypy + ' ' + main_entry + ' postfilter_variants'
            indel_postfilter_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
            indel_postfilter_command += ' --ref_fn ' + args.ref_fn
            indel_postfilter_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_filtering.vcf'
            indel_postfilter_command += ' --output_dir ' + args.output_dir + '/tmp/vcf_output'
            indel_postfilter_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_filtering.vcf'
            indel_postfilter_command += ' --samtools ' + args.samtools
            indel_postfilter_command += ' --pypy3 ' + args.pypy
            indel_postfilter_command += ' --parallel ' + args.parallel
            indel_postfilter_command += ' --threads ' + str(args.threads)
            indel_postfilter_command += ' --debug ' if args.debug else ''
            indel_postfilter_command += ' --show_ref ' if args.print_ref_calls else ''
            indel_postfilter_command += ' --is_indel '
            indel_postfilter_command += ' --enable_postfilter ' + str(args.enable_postfilter)
            indel_postfilter_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/8-2_POSTFILTER_INDEL.log'

            commands_list += [indel_realign_command + ' && ' + indel_postfilter_command]
        else:
            # INDEL HAPLOTYPE FILTERING
            echo_list.append("[INFO] STEP 8: Haplotype Filtering for Indel Variants")
            indel_hap_g_command = '( ' + time + args.pypy + ' ' + main_entry + ' haplotype_filtering'
            indel_hap_g_command += ' --tumor_bam_fn ' + tumor_bam_prefix
            indel_hap_g_command += ' --ref_fn ' + args.ref_fn
            indel_hap_g_command += ' --germline_vcf_fn ' + args.output_dir + '/tmp/vcf_output/snv_pileup.vcf'
            indel_hap_g_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_nonsomatic_tagging.vcf'
            indel_hap_g_command += ' --output_dir ' + args.output_dir + '/tmp/vcf_output'
            indel_hap_g_command += ' --output_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_filtering.vcf'
            indel_hap_g_command += ' --samtools ' + args.samtools
            indel_hap_g_command += ' --pypy3 ' + args.pypy
            indel_hap_g_command += ' --parallel ' + args.parallel
            indel_hap_g_command += ' --threads ' + str(args.threads)
            indel_hap_g_command += ' --debug ' if args.debug else ''
            indel_hap_g_command += ' --show_ref ' if args.print_ref_calls else ''
            indel_hap_g_command += ' --is_indel '
            indel_hap_g_command += ' --apply_haplotype_filtering ' + str(args.apply_haplotype_filtering)
            indel_hap_g_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/8_HAP_FILTER_INDEL.log'
            commands_list += [indel_hap_g_command]

        # INDEL VCF POST-PROCESSING
        echo_list.append("[INFO] STEP 9: Indel VCF Post-processing")
        indel_postprocess_vcf_command = '( ' + time + args.pypy + ' ' + main_entry + ' postprocess_vcf'
        indel_postprocess_vcf_command += ' --ref_fn ' + args.ref_fn
        indel_postprocess_vcf_command += ' --pileup_vcf_fn ' + args.output_dir + '/tmp/vcf_output/indel_pileup_filtering.vcf'
        indel_postprocess_vcf_command += ' --output_fn ' + args.output_dir + '/{}.vcf'.format(args.indel_output_prefix)
        indel_postprocess_vcf_command += ' --platform ' + args.platform
        indel_postprocess_vcf_command += ' --qual ' + str(args.qual)
        indel_postprocess_vcf_command += ' --qual_cutoff_phaseable_region ' + str(args.qual_cutoff_phaseable_region)
        indel_postprocess_vcf_command += ' --qual_cutoff_unphaseable_region ' + str(args.qual_cutoff_unphaseable_region)
        indel_postprocess_vcf_command += ' --sample_name ' + str(args.sample_name)
        indel_postprocess_vcf_command += ' --disable_indel_calling False'
        indel_postprocess_vcf_command += ' --indel_calling '
        indel_postprocess_vcf_command += ' --cmdline ' + args.output_dir + '/tmp/CMD'
        indel_postprocess_vcf_command += ' ) 2>&1 | tee ' + args.output_dir + '/logs/9_PV_INDEL.log'
        commands_list += [indel_postprocess_vcf_command]

        # ADD REFERENCE CALLs for Indel Calling
        if args.genotyping_mode_vcf_fn is not None or args.hybrid_mode_vcf_fn is not None:
            echo_list.append("[INFO] Add Reference Calls to the VCF Output for Indel Calling")
            indel_genotyping_command = args.pypy + ' ' + main_entry + ' add_back_missing_variants_in_genotyping'
            indel_genotyping_command += ' --genotyping_mode_vcf_fn ' + str(args.genotyping_mode_vcf_fn)
            indel_genotyping_command += ' --hybrid_mode_vcf_fn ' + str(args.hybrid_mode_vcf_fn)
            indel_genotyping_command += ' --call_fn ' + args.output_dir + '/{}.vcf.gz'.format(args.indel_output_prefix)
            indel_genotyping_command += ' --output_fn ' + args.output_dir + '/{}.vcf'.format(args.indel_output_prefix)
            indel_genotyping_command += ' --candidates_folder ' + args.output_dir + '/tmp/candidates'
            indel_genotyping_command += ' 2>&1 | tee ' + args.output_dir + '/logs/10_GT_INDEL.log'
            commands_list += [indel_genotyping_command]

        if not args.disable_verdict:
            echo_list.append("[INFO] Add CNA Germline Tagging to the VCF Output for Indel Calling")
            indel_cna_germline_tagging_command = args.python + ' ' + main_entry + ' cna_germline_tagging'
            indel_cna_germline_tagging_command += ' --tumor_bam_fn ' + args.tumor_bam_fn
            indel_cna_germline_tagging_command += ' --input_vcf_fn ' + args.output_dir + '/{}.vcf.gz'.format(
                args.indel_output_prefix)
            indel_cna_germline_tagging_command += ' --allele_counter ' + str(args.allele_counter_dir)
            indel_cna_germline_tagging_command += ' --cna_resource_dir ' + str(args.cna_resource_dir)
            indel_cna_germline_tagging_command += ' --output_fn ' + args.output_dir + '/{}.vcf'.format(
                args.indel_output_prefix)
            indel_cna_germline_tagging_command += ' --output_dir ' + args.output_dir + '/tmp/cna_output'
            indel_cna_germline_tagging_command += ' --parallel ' + args.parallel
            indel_cna_germline_tagging_command += ' --python ' + args.python
            indel_cna_germline_tagging_command += ' --contig_fn ' + args.output_dir + '/tmp/CONTIGS'
            indel_cna_germline_tagging_command += ' --threads ' + str(args.threads)
            indel_cna_germline_tagging_command += ' --platform ' + args.platform
            indel_cna_germline_tagging_command += ' --is_indel '
            indel_cna_germline_tagging_command += ' 2>&1 | tee ' + args.output_dir + '/logs/10_CGT_INDEL.log'
            commands_list += [indel_cna_germline_tagging_command]

    # EXECUTE COMMANDS STEP BY STEP
    skip_steps = args.skip_steps.rstrip().split(',') if args.skip_steps else None
    stdout = sys.stdout if args.tee is None else args.tee.stdin
    for i, (command, echo) in enumerate(zip(commands_list, echo_list)):
        logging(echo)
        logging("[INFO] RUN THE FOLLOWING COMMAND:")
        logging(command)
        logging("")
        if not args.dry_run:
            if skip_steps is not None and str(i + 1) in skip_steps:
                logging("[INFO] --skip_steps is enabled, skip running step {}.".format(i + 1))
                logging("")
                continue
            try:
                return_code = subprocess.check_call(command, shell=True, stdout=stdout)
            except subprocess.CalledProcessError as e:
                sys.stderr.write("ERROR in STEP {}, THE FOLLOWING COMMAND FAILED: {}\n".format(i + 1, command))
                exit(1)
        logging("")

    if args.remove_intermediate_dir:
        logging("[INFO] Removing intermediate files in {}/tmp ...".format(args.output_dir))
        subprocess.run('rm -rf {}/tmp'.format(args.output_dir), shell=True)


def somatic_parser():
    parser = argparse.ArgumentParser(
        description="Run ClairS-TO for tumor-only somatic variant calling. Example run: run_clairs_to -T TUMOR_BAM -R REF -o OUTPUT_DIR -t THREADS -p PLATFORM")

    # print version
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s {}'.format(param.version))

    required_params = parser.add_argument_group('Required parameters')
    required_params.add_argument(
        '-T',
        "--tumor_bam_fn",
        type=str,
        required=True,
        default=None,
        help="Tumor BAM file input. The input file must be samtools indexed."
    )

    required_params.add_argument(
        "-R",
        "--ref_fn",
        type=str,
        required=True,
        default=None,
        help="FASTA reference file input. The input file must be samtools indexed."
    )

    required_params.add_argument(
        "-o",
        "--output_dir",
        type=str,
        required=True,
        default=None,
        help="VCF output directory."
    )

    required_params.add_argument(
        "-t",
        "--threads",
        required=True,
        type=int,
        default=None,
        help="Max #threads to be used."
    )

    required_params.add_argument(
        "-p",
        "--platform",
        required=True,
        type=str,
        default=None,
        help="Select the sequencing platform of the input. Possible options: {ont_r10_dorado_sup_4khz, ont_r10_dorado_hac_4khz, ont_r10_dorado_sup_5khz, ont_r10_guppy_sup_4khz, ont_r10_guppy_hac_5khz, ilmn, hifi_revio}."
    )

    optional_params = parser.add_argument_group('Commonly used parameters')

    optional_params.add_argument(
        "-s",
        "--sample_name",
        type=str,
        default="SAMPLE",
        help="Define the sample name to be shown in the VCF file. Default: SAMPLE."
    )

    optional_params.add_argument(
        "-c",
        "--ctg_name",
        type=str,
        default=None,
        help="The name of the contigs to be processed. Split by ',' for multiple contigs. Default: all contigs will be processed."
    )

    optional_params.add_argument(
        "--include_all_ctgs",
        action='store_true',
        help="Call variants on all contigs, otherwise call in chr{1..22,X,Y} and {1..22,X,Y}."
    )

    optional_params.add_argument(
        "-r",
        "--region",
        type=str,
        default=None,
        help="A region to be processed. Format: `ctg_name:start-end` (start is 1-based, including both end positions)."
    )

    optional_params.add_argument(
        "-b",
        "--bed_fn",
        type=str,
        default=None,
        help="Path to a BED file. Call variants only in the provided BED regions."
    )

    optional_params.add_argument(
        "-G",
        "--genotyping_mode_vcf_fn",
        type=str,
        default=None,
        help="VCF file input containing candidate sites to be genotyped. Variants will only be called at the sites in the VCF file if provided."
    )

    optional_params.add_argument(
        "-H",
        "--hybrid_mode_vcf_fn",
        type=str,
        default=None,
        help="Enable hybrid calling mode that combines the de novo calling results and genotyping results at the positions in the VCF file given."
    )

    optional_params.add_argument(
        "--print_ref_calls",
        action='store_true',
        help="Show reference calls (0/0) in VCF output."
    )

    optional_params.add_argument(
        "--disable_indel_calling",
        action='store_true',
        help="Disable Indel calling. Default: enabled."
    )

    optional_params.add_argument(
        "--snv_min_af",
        type=float,
        default=None,
        help="Minimal SNV AF required for a variant to be called. Decrease SNV_MIN_AF might increase a bit of sensitivity, but in trade of precision, speed and accuracy. Default: 0.05."
    )

    optional_params.add_argument(
        "--indel_min_af",
        type=float,
        default=None,
        help="Minimal Indel AF required for a variant to be called. Default: 0.05."
    )

    ## Minimum base quality
    optional_params.add_argument(
        "--min_bq",
        type=int,
        default=None,
        help=SUPPRESS
    )

    optional_params.add_argument(
        "--bam_mplp_set_maxcnt",
        type=int,
        default=None,
        help=SUPPRESS
    )

    optional_params.add_argument(
        "--min_coverage",
        type=int,
        default=None,
        help="Minimal coverage required for a variant to be called. Default: 4."
    )

    optional_params.add_argument(
        '-q',
        "--qual",
        type=int,
        default=None,
        help="If set, variants with >QUAL will be tagged as PASS, or LowQual otherwise. Default: ONT: 12, PacBio HiFi: 8, Illumina: 4."
    )

    optional_params.add_argument(
        "--qual_cutoff_phaseable_region",
        type=int,
        default=None,
        help="If set, variants called in phaseable regions with >QUAL will be tagged as PASS, or LowQual otherwise. Supersede by `--qual`."
    )

    optional_params.add_argument(
        "--qual_cutoff_unphaseable_region",
        type=int,
        default=None,
        help="If set, variants called in unphaseable regions with >QUAL will be tagged as PASS, or LowQual otherwise. Supersede by `--qual`."
    )

    optional_params.add_argument(
        "--panel_of_normals",
        type=str,
        default=None,
        help="The path of the panel of normals (PoNs) used for tagging non-somatic variants. Split by ',' if using multiple PoNs. Default: 'gnomad.r2.1.af-ge-0.001.sites.vcf.gz,dbsnp.b138.non-somatic.sites.vcf.gz,1000g-pon.sites.vcf.gz'."
    )

    optional_params.add_argument(
        "--panel_of_normals_require_allele_matching",
        type=str,
        default=None,
        help="Use together with `--panel_of_normals`. Whether to require allele matching for each PoN. Split by ',' if using multiple PoNs. Default: 'True,True,False'."
    )

    optional_params.add_argument(
        "--snv_output_prefix",
        type=str,
        default="snv",
        help="Prefix for SNV output VCF filename. Default: snv."
    )

    optional_params.add_argument(
        "--indel_output_prefix",
        type=str,
        default="indel",
        help="Prefix for Indel output VCF filename. Default: indel."
    )

    optional_params.add_argument(
        "--call_indels_only_in_these_regions",
        type=str,
        default=None,
        help="Call Indel only in the provided regions. Supersede by `--bed_fn`. To call Indel in the whole genome, input a BED covering the whole genome. Default: 'GRCh38Chr1-22XY_excludedGIABStratifV3.3AllDifficultRegions_includedCMRGv1.0.bed'."
    )

    optional_params.add_argument(
        "--do_not_print_nonsomatic_calls",
        action='store_true',
        help="Do not print those non-somatic variants tagged by `--panel_of_normals`."
    )

    other_params = parser.add_argument_group('Other parameters')

    other_params.add_argument(
        "--snv_pileup_affirmative_model_path",
        type=str,
        default=None,
        help="Specify the path to your own SNV pileup affirmative model."
    )

    other_params.add_argument(
        "--snv_pileup_negational_model_path",
        type=str,
        default=None,
        help="Specify the path to your own SNV pileup negational model."
    )

    other_params.add_argument(
        "--snv_likelihood_matrix_data",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--indel_pileup_affirmative_model_path",
        type=str,
        default=None,
        help="Specify the path to your own Indel pileup affirmative model."
    )

    other_params.add_argument(
        "--indel_pileup_negational_model_path",
        type=str,
        default=None,
        help="Specify the path to your own Indel pileup negational model."
    )

    other_params.add_argument(
        "--indel_likelihood_matrix_data",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        '-d',
        "--dry_run",
        action='store_true',
        help="Print the commands that will be ran, but do not run them."
    )

    other_params.add_argument(
        "--chunk_size",
        type=int,
        default=None,
        help="The size of each chuck for parallel processing. Default: 5000000."
    )

    other_params.add_argument(
        "--remove_intermediate_dir",
        action='store_true',
        help="Remove the intermediate directory before finishing to save disk space."
    )

    other_params.add_argument(
        "--python",
        type=str,
        default="python3",
        help="Absolute path of python, python3 >= 3.9 is required."
    )

    other_params.add_argument(
        "--pypy",
        type=str,
        default="pypy3",
        help="Absolute path of pypy3, pypy3 >= 3.6 is required."
    )

    other_params.add_argument(
        "--samtools",
        type=str,
        default="samtools",
        help="Absolute path of samtools, samtools version >= 1.10 is required."
    )

    other_params.add_argument(
        "--parallel",
        type=str,
        default="parallel",
        help="Absolute path of parallel, parallel >= 20191122 is required."
    )

    other_params.add_argument(
        "--longphase",
        type=str,
        default=None,
        help="Absolute path of longphase, longphase >= 1.7 is required."
    )

    other_params.add_argument(
        "--whatshap",
        type=str,
        default=None,
        help="Absolute path of whatshap, whatshap >= 1.0 is required."
    )

    other_params.add_argument(
        "--use_longphase_for_intermediate_phasing",
        type=str2bool,
        default=None,
        help="Use longphase for intermediate phasing."
    )

    other_params.add_argument(
        "--use_whatshap_for_intermediate_phasing",
        type=str2bool,
        default=None,
        help="Use whatshap for intermediate phasing."
    )

    other_params.add_argument(
        "--disable_intermediate_phasing",
        action='store_true',
        help="Disable intermediate phasing, runs faster but reduces precision."
    )

    other_params.add_argument(
        "--use_longphase_for_intermediate_haplotagging",
        type=str2bool,
        default=None,
        help="Use longphase instead of whatshap for intermediate haplotagging."
    )

    other_params.add_argument(
        "--disable_nonsomatic_tagging",
        action='store_true',
        help="Disable non-somatic variants tagging and ignore `--panel_of_normals`."
    )

    ##Apply realignment for short-read data
    other_params.add_argument(
        "--enable_realignment",
        type=str2bool,
        default=True,
        help=SUPPRESS
    )

    ##Apply postfiltering for short-read data
    other_params.add_argument(
        "--enable_postfilter",
        type=str2bool,
        default=True,
        help=SUPPRESS
    )

    ##Apply haplotype filtering for long-read data
    other_params.add_argument(
        "--apply_haplotype_filtering",
        type=str2bool,
        default=True,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--disable_verdict",
        action='store_true',
        help="Disable using verdict to tag the variants in CNA regions. We suggest using the parameter only for sample with tumor purity estimation lower than 0.8. Default: enabled."
    )

    ## Phase tumor BAM in calling
    other_params.add_argument(
        "--phase_tumor",
        type=str2bool,
        default=None,
        help=SUPPRESS
    )

    # options for internal process control
    ## Prefer maximized recall
    other_params.add_argument(
        "--prefer_recall",
        action='store_true',
        help=SUPPRESS
    )

    ## Prefer balance between precision and recall
    other_params.add_argument(
        "--prefer_balance",
        action='store_true',
        help=SUPPRESS
    )

    ##If set then will use GPUs for inference. CUDA required
    other_params.add_argument(
        "-g",
        "--use_gpu",
        action='store_true',
        help=SUPPRESS
    )

    ##List of (ctg_name, chunk_id, chunk_num)
    other_params.add_argument(
        "--chunk_list",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--debug",
        type=str2bool,
        default=False,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--chunk_num",
        type=int,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--output_path",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--cna_resource_dir",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--allele_counter_dir",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--skip_steps",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--tee",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--conda_prefix",
        type=str,
        default=None,
        help=SUPPRESS
    )

    other_params.add_argument(
        "--cmdline",
        type=str,
        default=None,
        help=SUPPRESS
    )

    return parser


def main():
    """
    Main interface for ClairS-TO.
    """

    global args

    call_start_time = time()

    parser = somatic_parser()
    args = parser.parse_args()

    args.output_dir = folder_path_from(args.output_dir, create_not_found=True)
    tee_logger = os.path.join(args.output_dir, 'run_clairs_to.log' if not args.dry_run else "run_clairs_to_dry_run.log")
    if os.path.exists(tee_logger):
        subprocess.run("mv {} {}".format(tee_logger, tee_logger + '.bak'), shell=True)
    try:
        args.tee = subprocess.Popen(['tee', tee_logger], stdin=subprocess.PIPE, bufsize=0)
    except:
        logging(log_warning("[WARNING] `tee` not found, disable `tee` logging!"))
        args.tee = None

    logging("")

    args = print_command_line(args)
    args = check_args(args)
    args = print_args(args)
    somatic_calling(args)

    runtime = time() - call_start_time
    logging("[INFO] Total time elapsed: %im%.2fs\n" % (int(runtime / 60), int(runtime % 60)))
    if not args.disable_indel_calling:
        logging("[INFO] Finish calling, SNV output VCF file: {}/{}.vcf.gz\n".format(args.output_dir,
                                                                                    args.snv_output_prefix))
        logging("[INFO] Finish calling, Indel output VCF file: {}/{}.vcf.gz\n".format(args.output_dir,
                                                                                      args.indel_output_prefix))
    else:
        logging("[INFO] Finish calling, SNV output VCF file: {}/{}.vcf.gz\n".format(args.output_dir,
                                                                                    args.snv_output_prefix))

    if args.tee is not None:
        args.tee.stdin.close()


if __name__ == '__main__':
    main()
